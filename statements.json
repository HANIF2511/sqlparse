{
   "GET_STMT":[
      ":_STMT"
   ],
   "dbm_cdr_def1":[
      "select count(*), carrier, direction ",
      " from dbm_cdr_def ",
      " where carrier = :CARRIER  and direction = :direction",
      " group by :groupby order by :orderby "
   ],
   "dbm_cdr_def2":[
      "select count(*) , carrier, direction ",
      " from dbm_cdr_def ",
      " where carrier = :CARRIER  and direction = :direction",
      " group by :groupby order by :orderby "
   ],
   "users":[
      "select * from users "
   ],
   "usersbyname":[
      "select count(*) cnt,name from users ",
      " where name = :NAME ",
      " group by :groupby order by :orderby"
   ],
   "GET_usersauth":[
      "select name from users ",
      " where name = :NAME ",
      " and   password = :PASSWORD "
   ],
   "GET_EIM_COMMANDS":[
      "select SPC_FUNCTION,EQUIPID, EXCSYSTEM,CMDNO,TIMEOUT,CMDTXT,PARAM_FIELD,PARAMNO,PARAM_LENGTH ,CMD_LANGUAGE ",
      " from EIM_COMMANDS ",
      " where SPC_FUNCTION = :SPC_FUNCTION and EXCSYSTEM = :EXCSYSTEM and EQUIPID = :EQUIPID ",
      " order by SPC_FUNCTION,EXCSYSTEM,EQUIPID, CMDNO, PARAMNO "
   ],
   "GET_EIM_COMMANDS_QUERY":[
      "select SPC_FUNCTION,EXCSYSTEM,CMDNO,TIMEOUT,CMDTXT,PARAM_FIELD,PARAMNO,PARAM_LENGTH ,EQUIPID ,CMD_LANGUAGE ",
      " from EIM_COMMANDS ",
      " :_WHERE ",
      " order by SPC_FUNCTION,EXCSYSTEM,EQUIPID, CMDNO, PARAMNO "
   ],
   "GET_EIM_COMMAND_RECORD":[
      "select  AREA, SUBNO, SERORDNO, TRANSNO, EXC, EXCSYSTEM, PORTNO, SPC_FUNCTION, DEVTYPE, DEVNO, ",
      "PARAMETER, APPDATE, NXTROUTINE, RETRANSMIT, TRANSSTATUS, EQUIPID, RETRIES, PRIORITY, ",
      "SPC_ESC_COND, SPC_ESC_TIMESTAMP, SOTYPE, CARD_TYPE,CARDNO, STARTTIMESTAMP, ENDTIMESTAMP ",
      " from EIM_COMMAND_RECORD ",
      " where transno in (:transno ) "
   ],
   "GET_EIM_COMMAND_RECORD_QUERY":[
      "select  AREA, SUBNO, SERORDNO, TRANSNO, EXC, EXCSYSTEM, PORTNO, SPC_FUNCTION, DEVTYPE, DEVNO, ",
      "PARAMETER, APPDATE, NXTROUTINE, RETRANSMIT, TRANSSTATUS, EQUIPID, RETRIES, PRIORITY, ",
      "SPC_ESC_COND, SPC_ESC_TIMESTAMP, SOTYPE, CARD_TYPE,CARDNO, STARTTIMESTAMP, ENDTIMESTAMP ",
      " from EIM_COMMAND_RECORD ",
      " :_WHERE  "
   ],
   "GET_EIM_EXECUTED_COMMANDS":[
	"select TRANSNO,CMDNO,COMMAND,TIMEOUT,CMDSTATUS,ERRORCODE,TRANSDATE,ME_READING, ",
	"LTEST_VAL1,LTEST_VAL2,LTEST_VAL3,LTEST_VAL4,LTEST_VAL5,LTEST_VAL6,LTEST_VAL7,LTEST_VAL8,LTEST_VAL9,LTEST_VAL10, ",
	"LTEST_RESULT,CMD_LANGUAGE ",
	"from EIM_EXECUTED_COMMANDS ",
	"where transno in (:TRANSNO ) ",
	" order by CMDNO "
   ],
      "insert_users":[
	"INSERT INTO users (name, email, password)  ",
	"VALUES (:name , :email , :password ) "
   ],
      "delete_users":[
	"DELETE FROM users WHERE email = :email  "
   ],   
      "update_users":[
	"UPDATE users set ",
	"   name = :name ",
	" , password = :password " ,
	" where email = :email "
   ],
      "INSERT_EIM_COMMANDS":[
	"INSERT INTO EIM_COMMANDS " ,
	" ( SPC_FUNCTION, EXCSYSTEM, CMDNO, TIMEOUT, CMDTXT, PARAM_FIELD, PARAMNO, PARAM_LENGTH, EQUIPID, CMD_LANGUAGE ) " ,
	"VALUES ",
	" ( :SPC_FUNCTION , :EXCSYSTEM , :CMDNO , :TIMEOUT , :CMDTXT , :PARAM_FIELD , :PARAMNO , :PARAM_LENGTH , :EQUIPID , :CMD_LANGUAGE ) " 
   ],
      "UPDATE_EIM_COMMANDS":[
	"UPDATE  EIM_COMMANDS " ,
	"  set CMDTXT = :CMDTXT  " ,
	"     , TIMEOUT = :TIMEOUT  " ,
	"     , PARAM_FIELD = :PARAM_FIELD  " ,
	"     , PARAMNO = :PARAMNO  " ,
	"     , PARAM_LENGTH = :PARAM_LENGTH  " ,
	"     , CMD_LANGUAGE = :CMD_LANGUAGE  " ,
	" WHERE " ,
	"     SPC_FUNCTION = :SPC_FUNCTION ",
	" and EXCSYSTEM = :EXCSYSTEM ",
	" and EQUIPID = :EQUIPID ",
	" and CMDNO = :CMDNO ",
	" and PARAMNO = :PARAMNO "
   ],
      "DELETE_EIM_COMMANDS":[
	"DELETE from  EIM_COMMANDS " ,
	" WHERE " ,
	"     SPC_FUNCTION = :SPC_FUNCTION ",
	" and EXCSYSTEM = :EXCSYSTEM ",
	" and EQUIPID = :EQUIPID ",
	" and CMDNO = :CMDNO ",
	" and PARAMNO = :PARAMNO "
   ],
      "UPDATE_EIM_COMMAND_RECORD":[
	"UPDATE  EIM_COMMAND_RECORD " , 
	" set TRANSSTATUS = :TRANSSTATUS ",
	" WHERE " ,
	" TRANSNO = :TRANSNO "
   ],
      "UPDATE_EIM_EXECUTED_COMMANDS":[
	"UPDATE  EIM_EXECUTED_COMMANDS " ,
	" set CMDSTATUS = :CMDSTATUS ",
	"   , ERRORCODE = :ERRORCODE ",
	" WHERE " ,
	" TRANSNO = :TRANSNO "

   ],
   "GET_todos":[
      "select id, userId, title, completed from todos "
   ],
   "UPDATE_todos":[
	"UPDATE  todos " ,
	" set completed = :completed ",
	" WHERE " ,
	" id = :id "

   ],
   "DELETE_todos":[
	"DELETE from  todos " ,
	" WHERE " ,
	" id = :id "

   ],
   "GET_EPM_STEPS":[
	"SELECT FLOW_CODE, STEP_ID, ENGINE_TYPE, ENGINE_MODULE, ENGINE_PARAM, ",
	" PROCESSING_ORDER, ENGINE_PARAM2, IF_TRUE, IF_TRUE_PARAM, IF_FALSE, IF_FALSE_PARAM, ERROR_CODE, ",
	" DISABLED, DESCRIPTION, PARENT_FLOW_CODE, ENGINE_LEVEL, ICON, SIM_STATUS, SIM_ICON, ENGINE_PARAM3, ",
	" THREAD_ENABLE, ENGINE_PARAM4, ENGINE_PARAM5, CATEGORY, PARENT_STEP_ID, CHILD, ENGINE_PARAM6 ",
	" FROM EPM_STEPS ",
	" WHERE FLOW_CODE = :FLOW_CODE  ",
	"   AND STEP_ID like :STEP_ID  ",
	" order by PROCESSING_ORDER "
   ],

	"GET_EPM_STEPS_QUERY":[
		" SELECT FLOW_CODE ,  STEP_ID ,  ENGINE_TYPE ,  ENGINE_MODULE ,  ENGINE_PARAM ,  PROCESSING_ORDER ,  ENGINE_PARAM2 ,  IF_TRUE ,  IF_TRUE_PARAM ,  IF_FALSE ,  IF_FALSE_PARAM ,  ERROR_CODE ,  DISABLED ,  DESCRIPTION ,  PARENT_FLOW_CODE ,  ENGINE_LEVEL ,  ICON ,  SIM_STATUS ,  SIM_ICON ,  ENGINE_PARAM3 ,  THREAD_ENABLE ,  ENGINE_PARAM4 ,  ENGINE_PARAM5 ,  CATEGORY ,  PARENT_STEP_ID ,  CHILD ,  ENGINE_PARAM6",
		" FROM epm_steps ",
		" :_WHERE "
   ],
   "UPDATE_EPM_STEPS":[
	"UPDATE  EPM_STEPS " ,
	" set ENGINE_MODULE = :ENGINE_MODULE ",
	" , DISABLED = :DISABLED ", 
	" , DESCRIPTION = :DESCRIPTION ",
	" , PARENT_FLOW_CODE = :PARENT_FLOW_CODE ",
	" , ENGINE_LEVEL = :ENGINE_LEVEL ", 
	" , ENGINE_PARAM = :ENGINE_PARAM ",
	" , ENGINE_PARAM2 = :ENGINE_PARAM2 ",
	" , ENGINE_PARAM3 = :ENGINE_PARAM3 ",
	" , ENGINE_PARAM4 = :ENGINE_PARAM4 ",
	" , ENGINE_PARAM5 = :ENGINE_PARAM5 ",
	" , ENGINE_PARAM6 = :ENGINE_PARAM6 ",
	" , PROCESSING_ORDER = :PROCESSING_ORDER ",
	" , IF_TRUE = :IF_TRUE ",
	" , IF_TRUE_PARAM = :IF_TRUE_PARAM ",
	" , IF_FALSE = :IF_FALSE ",
	" , IF_FALSE_PARAM = :IF_FALSE_PARAM ",
	" , ERROR_CODE = :ERROR_CODE ",
	" , ICON = :ICON ",
	" , SIM_STATUS = :SIM_STATUS ",
	" , SIM_ICON = :SIM_ICON ", 
	" , THREAD_ENABLE = :THREAD_ENABLE ",
	" , CATEGORY = :CATEGORY ", 
	" , PARENT_STEP_ID = :PARENT_STEP_ID ",
	" , CHILD = :CHILD " , 
	" , LOGDATE = :LOGDATE ", 
	" , LOGNAME = :LOGNAME ",
	" WHERE FLOW_CODE = :FLOW_CODE ",
	"   AND STEP_ID = :STEP_ID "
   ],
   "UPDATE_EPM_STEPS_ORDER":[
	"UPDATE  EPM_STEPS " ,
	"   set PROCESSING_ORDER = PROCESSING_ORDER + 10 ",
	" where PROCESSING_ORDER >= :PROCESSING_ORDER ",
	" and FLOW_CODE =:FLOW_CODE "		  
   ],
   "INSERT_EPM_STEPS":[
	"INSERT INTO EPM_STEPS " ,
	" ( FLOW_CODE,  STEP_ID ,  ENGINE_TYPE ,  ENGINE_MODULE, DISABLED, DESCRIPTION, PARENT_FLOW_CODE, ENGINE_LEVEL, ENGINE_PARAM, ENGINE_PARAM2, ENGINE_PARAM3, ENGINE_PARAM4, ENGINE_PARAM5, ENGINE_PARAM6  " ,
	"  ,PROCESSING_ORDER, IF_TRUE, IF_TRUE_PARAM, IF_FALSE, IF_FALSE_PARAM, ERROR_CODE, ICON, SIM_STATUS, SIM_ICON, THREAD_ENABLE, CATEGORY, PARENT_STEP_ID, CHILD ,LOGNAME, LOGDATE ) ",
	"VALUES ",
	" ( :FLOW_CODE, " ,
	" (select max(STEP_ID) + 1 from EPM_STEPS where FLOW_CODE = :FLOW_CODE ) , " ,
	" :ENGINE_TYPE , :ENGINE_MODULE , :DISABLED , :DESCRIPTION , :PARENT_FLOW_CODE , :ENGINE_LEVEL , :ENGINE_PARAM , :ENGINE_PARAM2 , :ENGINE_PARAM3 , :ENGINE_PARAM4 , :ENGINE_PARAM5 , :ENGINE_PARAM6   " ,
	"  , :PROCESSING_ORDER , :IF_TRUE , :IF_TRUE_PARAM , :IF_FALSE , :IF_FALSE_PARAM , :ERROR_CODE , :ICON , :SIM_STATUS , :SIM_ICON , :THREAD_ENABLE , :CATEGORY , :PARENT_STEP_ID , :CHILD , :LOGNAME, :LOGDATE ) " 
   ],
   "GET_MAX_STEP_ID":[
	"SELECT MAX(STEP_ID) STEP_ID ",
	" FROM EPM_STEPS ",
	" WHERE FLOW_CODE = :FLOW_CODE  "
   ],
   "GET_MAX_PARAM2":[
	"SELECT MAX(ENGINE_PARAM2+0)+1 ENGINE_PARAM2 ",
	" FROM EPM_STEPS ",
	" WHERE FLOW_CODE = :FLOW_CODE  AND ENGINE_TYPE = :ENGINE_TYPE "
   ],

   "DELETE_EPM_STEPS":[
	"DELETE from  EPM_STEPS " ,
	" WHERE FLOW_CODE = :FLOW_CODE ",
	"   AND STEP_ID = :STEP_ID "
   ],
   
   "UPDATE_EPM_STEPS_PROCESSING_ORDER":[
	"UPDATE  EPM_STEPS " ,
	"   set PROCESSING_ORDER = :NEW_PROCESSING_ORDER ",
	" where PROCESSING_ORDER = :PROCESSING_ORDER ",
	" and FLOW_CODE =:FLOW_CODE "		  
   ],
   "GET_LGC_DETAIL":[
	"SELECT LGC_MODULE, LGC_TYPE, LGC_CALL_TYPE, LGC_CONDITION, LGC_ITEM, LGC_LGC_MODULE, LGC_LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_FUNCTION, ",
	" LGC_FIELD, LGC_PERIOD, LGC_LENGTH, LGC_OPERATION, LOG_VALUE_DISP, LGC_VALUE_TYPE, LGC_STAT_STR, LGC_VALUE, LGC_ACTION, LGC_REMARK, LGC_REASON_CODE, ",
	" LGC_RET, LGC_PARENT, DISABLED, LOG_OPERATOR, LOG_PARENT, LOGNAME, LOGDATE, LGC_TABLE, LGC_FIELD_NAME, LGC_VFAL_FIELD " ,
	" FROM LGC_DETAIL ",
	" WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION = :LGC_CONDITION "
   ],
   "INSERT_LGC_DETAIL":[
	"INSERT INTO LGC_DETAIL " ,
	"( LGC_MODULE, LGC_TYPE, LGC_CALL_TYPE, LGC_CONDITION, LGC_ITEM, LGC_LGC_MODULE, LGC_LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_FUNCTION, ",
	" LGC_FIELD, LGC_PERIOD, LGC_LENGTH, LGC_OPERATION, LOG_VALUE_DISP, LGC_VALUE_TYPE, LGC_STAT_STR, LGC_VALUE, LGC_ACTION, LGC_REMARK, LGC_REASON_CODE, ",
	" LGC_RET, LGC_PARENT, DISABLED, LOG_OPERATOR, LOG_PARENT, LOGNAME, LOGDATE, LGC_TABLE, LGC_FIELD_NAME, LGC_VFAL_FIELD ) " ,
	" VALUES ",
	"( :LGC_MODULE, :LGC_TYPE, :LGC_CALL_TYPE, :LGC_CONDITION, :LGC_ITEM, :LGC_LGC_MODULE, :LGC_LGC_TYPE, :LGC_GROUP, :LGC_GROUP_ITEM, :LGC_FUNCTION, ",
	" :LGC_FIELD, :LGC_PERIOD, :LGC_LENGTH, :LGC_OPERATION, :LOG_VALUE_DISP, :LGC_VALUE_TYPE, :LGC_STAT_STR, :LGC_VALUE, :LGC_ACTION, :LGC_REMARK, :LGC_REASON_CODE, ",
	" :LGC_RET, :LGC_PARENT, :DISABLED, :LOG_OPERATOR, :LOG_PARENT, :LOGNAME, :LOGDATE, :LGC_TABLE, :LGC_FIELD_NAME, :LGC_VFAL_FIELD ) " 
   ],
   "UPDATE_LGC_DETAIL":[
	"UPDATE LGC_DETAIL " ,
	" SET LGC_FUNCTION = :LGC_FUNCTION ", 
	" , LGC_FIELD = :LGC_FIELD ", 
	" , LGC_PERIOD = :LGC_PERIOD ", 
	" , LGC_LENGTH = :LGC_LENGTH ", 
	" , LGC_OPERATION = :LGC_OPERATION ", 
	" , LOG_VALUE_DISP = :LOG_VALUE_DISP ", 
	" , LGC_VALUE_TYPE = :LGC_VALUE_TYPE ", 
	" , LGC_STAT_STR = :LGC_STAT_STR ", 
	" , LGC_VALUE = :LGC_VALUE ", 
	" , LGC_ACTION = :LGC_ACTION ", 
	" , LGC_REMARK = :LGC_REMARK ", 
	" , LGC_REASON_CODE = :LGC_REASON_CODE ", 
	" , LGC_RET = :LGC_RET ", 
	" , LGC_PARENT = :LGC_PARENT ", 
	" , DISABLED = :DISABLED ", 
	" , LOG_OPERATOR = :LOG_OPERATOR ", 
	" , LOG_PARENT = :LOG_PARENT ", 
	" , LGC_TABLE = :LGC_TABLE ", 
	" , LGC_FIELD_NAME = :LGC_FIELD_NAME ", 
	" , LGC_VFAL_FIELD = :LGC_VFAL_FIELD ", 
	" , LOGDATE = :LOGDATE ", 
	" , LOGNAME = :LOGNAME ",
	" WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION LIKE :LGC_CONDITION AND LGC_ITEM LIKE :LGC_ITEM"
   ],
      "DELETE_LGC_DETAIL":[
	"DELETE from  LGC_DETAIL " ,
	" WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION LIKE :LGC_CONDITION AND LGC_ITEM LIKE :LGC_ITEM "
   ],
	"GET_LGC_DETAIL_QUERY":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  LGC_ITEM ,  LGC_LGC_MODULE ,  LGC_LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_FUNCTION ,  LGC_FIELD ,  LGC_PERIOD ,  LGC_LENGTH ,  LGC_OPERATION ,  LOG_VALUE_DISP ,  LGC_VALUE_TYPE ,  LGC_STAT_STR ,  LGC_VALUE ,  LGC_ACTION ,  LGC_REMARK ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_PARENT ,  DISABLED ,  LOG_OPERATOR ,  LOG_PARENT ,  LOGNAME ,  LOGDATE ,  LGC_TABLE ,  LGC_FIELD_NAME ,  LGC_VFAL_FIELD ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM LGC_DETAIL ",
		" :_WHERE "
  ],
	 "GET_STM_CDR_DEF":[
	"SELECT CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID, CDR_SIZE, CDR_CAT, INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE " ,
	" FROM STM_CDR_DEF " ,
	" WHERE CDR_TYPE = :CDR_TYPE  "
   ],
   "GET_STM_CDR_DEF_QUERY":[
	"SELECT CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID, CDR_SIZE, CDR_CAT, INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE " ,
	" FROM STM_CDR_DEF " ,
        " :_WHERE ",
        " order by CDR_TYPE  "
   ],
   "INSERT_STM_CDR_DEF":[
	"INSERT INTO STM_CDR_DEF " ,
	" ( CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID,  CDR_SIZE, CDR_CAT, " ,
	"   INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE )" ,
	" VALUES ",
	" ( :CDR_TYPE, :DESCRIPTION, :DATA_TYPE, :DATA_SOURCE, :OWNER, :LOGDATE, :LOGNAME, :WHERE_FILTER, :DELIMITER, :IGNORE_FIRST_LINE, :DATA_BASE_ID, :CDR_SIZE, :CDR_CAT, " ,
	"   :INPUT_CONTROL, :ASN_HEADER, :MAPPING_PARENT, :FLOW_CODE, :ORDER_GROUP_BY, :SAMPLE_FILE, :DEFAULT_FIELD_SIZE, :ASN_CAT, :UNMAP_METHOD, :CDR_DATA_SIZE, :UTF_CODE )" 
   ],
	"UPDATE_STM_CDR_DEF":[
		" UPDATE  STM_CDR_DEF ",
		" SET   CDR_TYPE = :CDR_TYPE " , 
	  ",  DESCRIPTION = :DESCRIPTION " , 
	  ",  DATA_TYPE = :DATA_TYPE " , 
	  ",  DATA_SOURCE = :DATA_SOURCE " , 
	  ",  OWNER = :OWNER " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  WHERE_FILTER = :WHERE_FILTER " , 
	  ",  DELIMITER = :DELIMITER " , 
	  ",  IGNORE_FIRST_LINE = :IGNORE_FIRST_LINE " , 
	  ",  DATA_BASE_ID = :DATA_BASE_ID " , 
	  ",  CDR_SIZE = :CDR_SIZE " , 
	  ",  CDR_CAT = :CDR_CAT " , 
	  ",  INPUT_CONTROL = :INPUT_CONTROL " , 
	  ",  ASN_HEADER = :ASN_HEADER " , 
	  ",  MAPPING_PARENT = :MAPPING_PARENT " , 
	  ",  FLOW_CODE = :FLOW_CODE " , 
	  ",  ORDER_GROUP_BY = :ORDER_GROUP_BY " , 
	  ",  SAMPLE_FILE = :SAMPLE_FILE " , 
	  ",  DEFAULT_FIELD_SIZE = :DEFAULT_FIELD_SIZE " , 
	  ",  ASN_CAT = :ASN_CAT " , 
	  ",  UNMAP_METHOD = :UNMAP_METHOD " , 
	  ",  CDR_DATA_SIZE = :CDR_DATA_SIZE " , 
	  ",  UTF_CODE = :UTF_CODE ",
		" WHERE CDR_TYPE = :CDR_TYPE "
   ],
      "DELETE_STM_CDR_DEF":[
	"DELETE from  STM_CDR_DEF " ,
	" WHERE CDR_TYPE = :CDR_TYPE "
   ],
    "GET_ROUTINES_AUTH":[
	"SELECT A.ROUTINE ROUTINE " ,
	" from ADM_USER_INFORMATION U, ADM_AUTHORITY A, MENUS M ",
	" WHERE U.USERNAME = :USERNAME ",
	"   and U.GROUPNAME=  A.username ",
	"   and M.MENU_TYPE = :MENU_TYPE ",
	"   and M.CHOICE = :CHOICE ",
	"   and A.ROUTINE  =  M.CHOICE "
   ],
   "VERIFY_ADM_USER":[
	"SELECT USERNAME , FULLNAME , SIGN , DIVS , DEPT , PHONE , GROUPNAME , LANGUAGE , IP_RESTRICT , WEB_ENABLED , WEB_BROWSER , DEFAULT_PRINTER , EXTRA_PERC , FIN_ADMIN , LOGDATE , LOGNAME , PASSWORD , TEAM , LEADER , TODAY , TOMORROW , NOTES ",
	" from ADM_USER_INFORMATION ",
	" WHERE USERNAME = :USERNAME ",
	"   AND PASSWORD = :PASSWORD "
   ],
   "INSERT_LGC_LOGIC_GROUP":[
	"INSERT INTO LGC_LOGIC_GROUP " ,
	" ( LGC_MODULE, LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_GROUP_FUNCTION, LGC_VALUE, LGC_FIELD_FROM, LGC_FIELD_TO, DISABLED, LGC_REMARK, LGC_LEN, LOGNAME, LOGDATE, ",
	"   LGC_FIELD, LGC_FROM_VAR2, LGC_LEN_VAR2, LGC_PARENT, LGC_VAR1, LGC_VAR2, LGC_VAR1_OFFSET, LGC_VAR2_OFFSET, LGC_FIELD_OFFSET, LGC_VAR1_OFFSET_FIELD, LGC_GROUP_ORDER ) ",
	" VALUES ",
	" ( :LGC_MODULE, :LGC_TYPE, :LGC_GROUP, :LGC_GROUP_ITEM, :LGC_GROUP_FUNCTION, :LGC_VALUE, :LGC_FIELD_FROM, :LGC_FIELD_TO, :DISABLED, :LGC_REMARK, :LGC_LEN, :LOGNAME, :LOGDATE, ",
	"   :LGC_FIELD, :LGC_FROM_VAR2, :LGC_LEN_VAR2, :LGC_PARENT, :LGC_VAR1, :LGC_VAR2, :LGC_VAR1_OFFSET, :LGC_VAR2_OFFSET, :LGC_FIELD_OFFSET, :LGC_VAR1_OFFSET_FIELD, :LGC_GROUP_ORDER ) "
   ],
   "UPDATE_LGC_LOGIC_GROUP":[
	"UPDATE LGC_LOGIC_GROUP " ,
	" SET LGC_MODULE = :LGC_MODULE ", 
	" , LGC_TYPE = :LGC_TYPE ", 
	" , LGC_GROUP = :LGC_GROUP ", 
	" , LGC_GROUP_ITEM = :LGC_GROUP_ITEM ", 
	" , LGC_GROUP_FUNCTION = :LGC_GROUP_FUNCTION ", 
	" , LGC_VALUE = :LGC_VALUE ", 
	" , LGC_FIELD_FROM = :LGC_FIELD_FROM ", 
	" , LGC_FIELD_TO = :LGC_FIELD_TO ", 
	" , DISABLED = :DISABLED ", 
	" , LGC_REMARK = :LGC_REMARK ", 
	" , LGC_LEN = :LGC_LEN ", 
	" , LOGNAME = :LOGNAME ", 
	" , LOGDATE = :LOGDATE ", 
	" , LGC_FIELD = :LGC_FIELD ", 
	" , LGC_FROM_VAR2 = :LGC_FROM_VAR2 ", 
	" , LGC_LEN_VAR2 = :LGC_LEN_VAR2 ", 
	" , LGC_PARENT = :LGC_PARENT ", 
	" , LGC_VAR1 = :LGC_VAR1 ", 
	" , LGC_VAR2 = :LGC_VAR2 ", 
	" , LGC_VAR1_OFFSET = :LGC_VAR1_OFFSET ", 
	" , LGC_VAR2_OFFSET = :LGC_VAR2_OFFSET ", 
	" , LGC_FIELD_OFFSET = :LGC_FIELD_OFFSET ", 
	" , LGC_VAR1_OFFSET_FIELD = :LGC_VAR1_OFFSET_FIELD ", 
	" , LGC_GROUP_ORDER = :LGC_GROUP_ORDER ",
	" WHERE LGC_MODULE =  :LGC_MODULE ",
	"   AND LGC_TYPE =  :LGC_TYPE ", 
	"   AND LGC_GROUP =  :LGC_GROUP ",
	"   AND LGC_GROUP_ITEM =  :LGC_GROUP_ITEM "
   ],
      "DELETE_LGC_LOGIC_GROUP":[
	"DELETE from  LGC_LOGIC_GROUP " ,
	" WHERE LGC_MODULE =  :LGC_MODULE ",
	"   AND LGC_TYPE =  :LGC_TYPE ", 
	"   AND LGC_GROUP =  :LGC_GROUP ",
	"   AND LGC_GROUP_ITEM =  :LGC_GROUP_ITEM "
   ],
      "DELETE_LGC_LOGIC_GROUP_FOR_STEP":[
	"DELETE from  LGC_LOGIC_GROUP " ,
	" WHERE LGC_MODULE =  :LGC_MODULE ",
	"   AND LGC_TYPE =  :LGC_TYPE ", 
	"   AND LGC_GROUP =   ",
	"   (SELECT LGC_GROUP from LGC_HEAD where LGC_MODULE = :LGC_MODULE and LGC_TYPE = :LGC_TYPE and LGC_CALL_TYPE = :LGC_CALL_TYPE )  "
   ],
   "GET_STM_DATA_BASE":[
	"SELECT DATA_BASE_ID, DATA_BASE, DB_USER, DB_PASS, LOGNAME, LOGDATE, DB_VENDOR ",
	" FROM STM_DATA_BASE ",
	" WHERE DATA_BASE_ID =  :DATA_BASE_ID "
   ],
   "INSERT_STM_DATA_BASE":[
	"INSERT INTO STM_DATA_BASE " ,
	" ( DATA_BASE_ID, DATA_BASE, DB_USER, DB_PASS, DB_VENDOR, LOGNAME, LOGDATE ) ",
	" VALUES ",
	" ( :DATA_BASE_ID, :DATA_BASE, :DB_USER, :DB_PASS, :DB_VENDOR, :LOGNAME, :LOGDATE ) "
   ],
   "UPDATE_STM_DATA_BASE":[
	"UPDATE STM_DATA_BASE " ,
	" SET DATA_BASE = :DATA_BASE ", 
	" , DB_USER = :DB_USER ", 
	" , DB_PASS = :DB_PASS ", 
	" , DB_VENDOR = :DB_VENDOR ", 
	" , LOGNAME = :LOGNAME ", 
	" , LOGDATE = :LOGDATE ", 
	" WHERE DATA_BASE_ID =  :DATA_BASE_ID "
   ],
      "DELETE_STM_DATA_BASE":[
	"DELETE from  STM_DATA_BASE " ,
	" WHERE DATA_BASE_ID =  :DATA_BASE_ID "
   ],
   "GET_DSP_ORDERS":[
        " SELECT ORDER_TYPE , ORDER_NO , TEMPLATE_NAME, SUBNO , ORDER_STATUS , DIVS , DEPT , ASSIGNEE_TYPE , ASSIGNEE , PROMISED_DATE ,ORDERED_DATE , COMPLETION_DATE , NOTES , PARENT_ORDER_TYPE , PARENT_ORDER_NO , ACTUAL_START_DATE , ACTUAL_END_DATE ,ORDER_FIELDS, ATTACHMENTS, LOGDATE , LOGNAME ",
	" FROM DSP_ORDERS ",
	" WHERE  ORDER_TYPE like :ORDER_TYPE  AND  ORDER_NO like :ORDER_NO  ",
	" ORDER BY ORDER_NO "
   ],
      "GET_DSP_ORDERS_QUERY":[
        " SELECT ORDER_TYPE , ORDER_NO ,TEMPLATE_NAME,  SUBNO , ORDER_STATUS , DIVS , DEPT , ASSIGNEE_TYPE , ASSIGNEE , PROMISED_DATE ,ORDERED_DATE, COMPLETION_DATE , NOTES , PARENT_ORDER_TYPE , PARENT_ORDER_NO , ACTUAL_START_DATE , ACTUAL_END_DATE , ORDER_FIELDS, ATTACHMENTS ,LOGDATE , LOGNAME ",
	" FROM DSP_ORDERS ",
      " :_WHERE ",
      " order by ORDER_NO  "
   ],
   "INSERT_DSP_ORDERS":[
	" INSERT INTO DSP_ORDERS ",
	" ( ORDER_TYPE , ORDER_NO , TEMPLATE_NAME,  SUBNO , ORDER_STATUS , DIVS , DEPT , ASSIGNEE_TYPE , ASSIGNEE , PROMISED_DATE ,ORDERED_DATE, COMPLETION_DATE , NOTES , PARENT_ORDER_TYPE ,PARENT_ORDER_NO , ACTUAL_START_DATE , ACTUAL_END_DATE ,ORDER_FIELDS, ATTACHMENTS, LOGDATE , LOGNAME  ) ",
	" VALUES ",
	" ( :ORDER_TYPE , :ORDER_NO ,:TEMPLATE_NAME,  :SUBNO , :ORDER_STATUS , :DIV , :DEPT , :ASSIGNEE_TYPE , :ASSIGNEE , :PROMISED_DATE , :ORDERED_DATE, :COMPLETION_DATE , :NOTES , :PARENT_ORDER_TYPE , :PARENT_ORDER_NO , :ACTUAL_START_DATE , :ACTUAL_END_DATE , :ORDER_FIELDS, :ATTACHMENTS, :LOGDATE , :LOGNAME  ) "
   ],
	"UPDATE_DSP_ORDERS":[
		" UPDATE  DSP_ORDERS ",
		" SET     ORDER_TYPE = :ORDER_TYPE ",
		 ", ORDER_NO = :ORDER_NO ",
		 ", TEMPLATE_NAME = :TEMPLATE_NAME ",
		 ", SUBNO = :SUBNO ",
		 ", ORDER_STATUS = :ORDER_STATUS ",
		 ", DIVS = :DIV ",
		 ", DEPT = :DEPT ",
		 ", ASSIGNEE_TYPE = :ASSIGNEE_TYPE ",
		 ", ASSIGNEE = :ASSIGNEE ",
		 ", PROMISED_DATE = :PROMISED_DATE ",
		 ", ORDERED_DATE = :ORDERED_DATE ",
		 ", COMPLETION_DATE = :COMPLETION_DATE ",
		 ", NOTES = :NOTES ",
		 ", PARENT_ORDER_TYPE = :PARENT_ORDER_TYPE ",
		 ", PARENT_ORDER_NO = :PARENT_ORDER_NO ",
		 ", ACTUAL_START_DATE = :ACTUAL_START_DATE ",
		 ", ACTUAL_END_DATE = :ACTUAL_END_DATE ",
 		 ", ORDER_FIELDS = :ORDER_FIELDS ",
		 ", ATTACHMENTS = :ATTACHMENTS ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		" WHERE ORDER_TYPE = :ORDER_TYPE  AND  ORDER_NO = :ORDER_NO  " 
	],
	
	"UPDATE_DSP_ORDER_FIELDS":[
		" UPDATE  DSP_ORDERS ",
		" SET     ORDER_FIELDS = :ORDER_FIELDS ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		" WHERE ORDER_NO = :ORDER_NO  " 
	],

	"DELETE_DSP_ORDERS":[
		" DELETE FROM DSP_ORDERS ",
		" WHERE  ORDER_TYPE = :ORDER_TYPE  AND  ORDER_NO = :ORDER_NO"
	],
	"GET_ADM_USER_INFORMATION":[
		" SELECT USERNAME , FULLNAME , SIGN , DIVS , DEPT , PHONE , GROUPNAME , LANGUAGE , IP_RESTRICT , WEB_ENABLED , WEB_BROWSER , DEFAULT_PRINTER , EXTRA_PERC , FIN_ADMIN , LOGDATE , LOGNAME , PASSWORD , TEAM , LEADER , TODAY , TOMORROW , NOTES ",
		" FROM ADM_USER_INFORMATION ",
		" WHERE  USERNAME = :USERNAME  ",
		" order by USERNAME  "
	],
	"GET_ADM_USER_INFORMATION_QUERY":[
		" SELECT USERNAME , FULLNAME , SIGN , DIVS , DEPT , PHONE , GROUPNAME , LANGUAGE , IP_RESTRICT , WEB_ENABLED , WEB_BROWSER ,  DEFAULT_PRINTER , EXTRA_PERC , FIN_ADMIN , LOGDATE , LOGNAME , PASSWORD , TEAM , LEADER , TODAY , TOMORROW , NOTES ",
		" FROM ADM_USER_INFORMATION ",
		" :_WHERE ",
		" order by USERNAME  "
	],
	"INSERT_ADM_USER_INFORMATION":[
		" INSERT INTO ADM_USER_INFORMATION ",
		" ( USERNAME , FULLNAME , SIGN , DIVS , DEPT , PHONE , GROUPNAME , LANGUAGE , IP_RESTRICT , WEB_ENABLED , WEB_BROWSER ,  DEFAULT_PRINTER , EXTRA_PERC , FIN_ADMIN , LOGDATE ,LOGNAME , PASSWORD , TEAM , LEADER , TODAY , TOMORROW , NOTES  ) ",
		" VALUES ",
		" ( :USERNAME , :FULLNAME , :SIGN , :DIV , :DEPT , :PHONE , :GROUPNAME , :LANGUAGE , :IP_RESTRICT , :WEB_ENABLED , :WEB_BROWSER , :DEFAULT_PRINTER , :EXTRA_PERC , :FIN_ADMIN , :LOGDATE , :LOGNAME , :PASSWORD , :TEAM , :LEADER , :TODAY , :TOMORROW, :NOTES  ) "
	],

	"UPDATE_ADM_USER_INFORMATION":[
		" UPDATE  ADM_USER_INFORMATION ",
		" SET     USERNAME = :USERNAME ",
		 ", FULLNAME = :FULLNAME ",
		 ", SIGN = :SIGN ",
		 ", DIVS = :DIV ",
		 ", DEPT = :DEPT ",
		 ", PHONE = :PHONE ",
		 ", GROUPNAME = :GROUPNAME ",
		 ", LANGUAGE = :LANGUAGE ",
		 ", IP_RESTRICT = :IP_RESTRICT ",
		 ", WEB_ENABLED = :WEB_ENABLED ",
		 ", WEB_BROWSER = :WEB_BROWSER ",
		 ", DEFAULT_PRINTER = :DEFAULT_PRINTER ",
		 ", EXTRA_PERC = :EXTRA_PERC ",
		 ", FIN_ADMIN = :FIN_ADMIN ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		 ", PASSWORD = :PASSWORD ",
		 ", TEAM = :TEAM ",
		 ", LEADER = :LEADER ",
		 ", TODAY = :TODAY ",
		 ", TOMORROW = :TOMORROW ",
		 ", NOTES = :NOTES ",
		" WHERE  USERNAME = :USERNAME  "
	],
	"DELETE_ADM_USER_INFORMATION":[
		" DELETE FROM ADM_USER_INFORMATION ",
		" WHERE  USERNAME = :USERNAME  "
	],
	"GET_ADM_TEAM":[
		" SELECT TEAM , FULLNAME , DIVS , DEPT , PHONE , DEFAULT_PRINTER , NOTES ",
		" FROM ADM_TEAM ",
		" WHERE  TEAM = :TEAM   "
	],
	"GET_ADM_TEAM_QUERY":[
		" SELECT TEAM , FULLNAME , DIVS , DEPT , PHONE , DEFAULT_PRINTER , NOTES ",
		" FROM ADM_TEAM ",
		" :_WHERE ",
		" order by TEAM  "
	],
	"INSERT_ADM_TEAM":[
		" INSERT INTO ADM_TEAM ",
		" ( TEAM , FULLNAME , DIVS , DEPT , PHONE , DEFAULT_PRINTER , NOTES  ) ",
		" VALUES ",
		" ( :TEAM , :FULLNAME , :DIV , :DEPT , :PHONE , :DEFAULT_PRINTER , :NOTES  ) "

	],
	"UPDATE_ADM_TEAM":[
		" UPDATE  ADM_TEAM ",
		" SET     TEAM = :TEAM ",
		 ", FULLNAME = :FULLNAME ",
		 ", DIVS = :DIV ",
		 ", DEPT = :DEPT ",
		 ", PHONE = :PHONE ",
		 ", DEFAULT_PRINTER = :DEFAULT_PRINTER ",
		 ", NOTES = :NOTES ",
		" WHERE  TEAM = :TEAM   "
	],
	"DELETE_ADM_TEAM":[
		" DELETE FROM ADM_TEAM ",
		" WHERE  TEAM = :TEAM   "
	],
	"GET_ADM_USER_DUTY":[
		" SELECT USERNAME , ON_DUTY_DATE , A_1 , P_1 , O_1 , A_2 , P_2 , O_2 , A_3 ,P_3 , O_3 , A_4 , P_4 , O_4 , A_5 , P_5 , O_5 , A_6 , P_6 , O_6 , A_7 , P_7 , O_7 , LOGDATE , LOGNAME ",
		" FROM ADM_USER_DUTY ",
		" WHERE  USERNAME = :USERNAME  AND  ON_DUTY_DATE = :ON_DUTY_DATE  ",
		" order by USERNAME asc, ON_DUTY_DATE desc "
	],
	"GET_ADM_USER_DUTY_QUERY":[
		" SELECT USERNAME  , ON_DUTY_DATE ,  A_1 , P_1 , O_1 , A_2 , P_2 , O_2 , A_3 ,P_3 , O_3 , A_4 , P_4 , O_4 , A_5 , P_5 , O_5 , A_6 , P_6 , O_6 , A_7 , P_7 , O_7 , LOGDATE , LOGNAME ",
		" FROM ADM_USER_DUTY ",
		" :_WHERE ",
		" order by USERNAME asc, ON_DUTY_DATE desc "
	],
	"GET_ADM_USER_DUTY_JOIN_QUERY":[
		" SELECT A.USERNAME  , ON_DUTY_DATE , TEAM, A_1 , P_1 , O_1 , A_2 , P_2 , O_2 , A_3 ,P_3 , O_3 , A_4 , P_4 , O_4 , A_5 , P_5 , O_5 , A_6 , P_6 , O_6 , A_7 , P_7 , O_7 , A.LOGDATE , A.LOGNAME ",
		" FROM ADM_USER_DUTY A, ADM_USER_INFORMATION B ",
		" where  A.USERNAME = B.USERNAME ",
		" :_WHERE ",
		" order by A.USERNAME asc, ON_DUTY_DATE desc "
	],

	"INSERT_ADM_USER_DUTY":[
		" INSERT INTO ADM_USER_DUTY ",
		" ( USERNAME , ON_DUTY_DATE , A_1 , P_1 , O_1 , A_2 , P_2 , O_2 , A_3 , P_3 , O_3 , A_4 , P_4 , O_4 , A_5 , P_5 , O_5 , A_6 , P_6 , O_6 , A_7 , P_7 , O_7 , LOGDATE , LOGNAME  ) ", 
		" VALUES ",
		" ( :USERNAME , :ON_DUTY_DATE , :A_1 , :P_1 , :O_1 , :A_2 , :P_2 , :O_2 , :A_3 , :P_3 , :O_3 , :A_4 , :P_4 , :O_4 , :A_5 , :P_5 , :O_5 , :A_6 , :P_6 , :O_6 , :A_7 , :P_7 , :O_7 , :LOGDATE , :LOGNAME  ) "
	],
	"UPDATE_ADM_USER_DUTY":[
		" UPDATE  ADM_USER_DUTY ",
		" SET     USERNAME = :USERNAME ",
		 ", ON_DUTY_DATE = :ON_DUTY_DATE ",
		 ", A_1 = :A_1 ",
		 ", P_1 = :P_1 ",
		 ", O_1 = :O_1 ",
		 ", A_2 = :A_2 ",
		 ", P_2 = :P_2 ",
		 ", O_2 = :O_2 ",
		 ", A_3 = :A_3 ",
		 ", P_3 = :P_3 ",
		 ", O_3 = :O_3 ",
		 ", A_4 = :A_4 ",
		 ", P_4 = :P_4 ",
		 ", O_4 = :O_4 ",
		 ", A_5 = :A_5 ",
		 ", P_5 = :P_5 ",
		 ", O_5 = :O_5 ",
		 ", A_6 = :A_6 ",
		 ", P_6 = :P_6 ",
		 ", O_6 = :O_6 ",
		 ", A_7 = :A_7 ",
		 ", P_7 = :P_7 ",
		 ", O_7 = :O_7 ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		" WHERE  USERNAME = :USERNAME  AND  ON_DUTY_DATE = :ON_DUTY_DATE  "
	],
	"DELETE_ADM_USER_DUTY":[
		" DELETE FROM ADM_USER_DUTY ",
		" WHERE  USERNAME = :USERNAME  AND  ON_DUTY_DATE = :ON_DUTY_DATE  "
	],
	"GET_DSP_TEMPLATE":[
		" SELECT TEMPLATE_NAME , ORDER_TYPE , DEPT, DIVS,ASSIGNEE_TYPE, ASSIGNEE,  PARENT_ORDER_TYPE , DESCRIPTION,  FORM_NAME, DAYS,  LOGDATE , LOGNAME ",
		" FROM DSP_TEMPLATE ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  ",
		" ORDER BY  TEMPLATE_NAME "
	],
	"GET_DSP_TEMPLATE_BY_ORDER_NO":[
		" SELECT A.TEMPLATE_NAME , A.ORDER_TYPE , A.DEPT, A.DIVS, A.ASSIGNEE_TYPE, A.ASSIGNEE,  A.PARENT_ORDER_TYPE , A.DESCRIPTION,  A.FORM_NAME, A.DAYS,  A.LOGDATE , A.LOGNAME ",
		" FROM DSP_TEMPLATE A, DSP_ORDERS B",
		" WHERE  ORDER_NO = :ORDER_NO  ",
		"   AND A.TEMPLATE_NAME = B.TEMPLATE_NAME  "
	],
	
	"GET_DSP_TEMPLATE_QUERY":[
		" SELECT TEMPLATE_NAME , ORDER_TYPE , DEPT, DIVS,ASSIGNEE_TYPE, ASSIGNEE,  PARENT_ORDER_TYPE , DESCRIPTION,  FORM_NAME, DAYS,  LOGDATE , LOGNAME ",
		" FROM DSP_TEMPLATE ",
		" :_WHERE ",
		" ORDER BY  TEMPLATE_NAME "
	],
	"INSERT_DSP_TEMPLATE":[
		" INSERT INTO DSP_TEMPLATE ",
		" ( TEMPLATE_NAME , ORDER_TYPE ,DEPT, DIVS, ASSIGNEE_TYPE, ASSIGNEE,  PARENT_ORDER_TYPE , DESCRIPTION,  FORM_NAME,  DAYS , LOGDATE , LOGNAME  ) ",      
		" VALUES ",
		" ( :TEMPLATE_NAME , :ORDER_TYPE ,:DEPT, :DIV, :ASSIGNEE_TYPE, :ASSIGNEE, :PARENT_ORDER_TYPE , :DESCRIPTION,  :FORM_NAME,  :DAYS, :LOGDATE , :LOGNAME  ) "
	],
	"UPDATE_DSP_TEMPLATE":[
		" UPDATE  DSP_TEMPLATE ",
		" SET     TEMPLATE_NAME = :TEMPLATE_NAME ",
		 ", ORDER_TYPE = :ORDER_TYPE ",
		 ", PARENT_ORDER_TYPE = :PARENT_ORDER_TYPE ",
		 ", DEPT = :DEPT ",
		 ", DIVS = :DIV ",
		 ", ASSIGNEE_TYPE = :ASSIGNEE_TYPE ",
		 ", ASSIGNEE = :ASSIGNEE ",
		 ", DESCRIPTION = :DESCRIPTION ",
		 ", FORM_NAME = :FORM_NAME ",
		 ", DAYS = :DAYS ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME "
	],
	"DELETE_DSP_TEMPLATE":[
		" DELETE FROM DSP_TEMPLATE ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME "
	],
	"GET_DSP_TEMPLATE_DETAIL":[
		" SELECT TEMPLATE_NAME , WO_TYPE , SEQUENCE, TEMPLATE_ORDER , DEPENDANT_WO_ORDER , DIVS ,DEPT , ASSIGNEE_TYPE, ASSIGNEE, DURATION ,FORM_PAGES_NO,  LOGDATE , LOGNAME ",
		" FROM DSP_TEMPLATE_DETAIL ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  AND  SEQUENCE like :SEQUENCE ",
		" ORDER BY  TEMPLATE_NAME, TEMPLATE_ORDER "
	],
	"GET_DSP_TEMPLATE_DETAIL_QUERY":[
		" SELECT TEMPLATE_NAME , WO_TYPE , SEQUENCE, TEMPLATE_ORDER , DEPENDANT_WO_ORDER , DIVS ,DEPT , ASSIGNEE_TYPE, ASSIGNEE, DURATION , FORM_PAGES_NO, LOGDATE , LOGNAME ",
		" FROM DSP_TEMPLATE_DETAIL ",
		" :_WHERE ",
		" ORDER BY  TEMPLATE_NAME, TEMPLATE_ORDER "
	],

	"GET_DSP_TEMPLATE_DETAIL_BY_ORDER_NO":[
		" SELECT A.TEMPLATE_NAME , A.WO_TYPE , A.SEQUENCE, A.TEMPLATE_ORDER , A.DEPENDANT_WO_ORDER , A.DIVS , A.DEPT , A.ASSIGNEE_TYPE, A.ASSIGNEE, A.DURATION , A.FORM_PAGES_NO,  A.LOGDATE , A.LOGNAME ",
		" FROM DSP_TEMPLATE_DETAIL A , DSP_ORDERS B ",
		" WHERE  ORDER_NO = :ORDER_NO  ",
		"   AND A.TEMPLATE_NAME = B.TEMPLATE_NAME  ",
		" ORDER BY  A.TEMPLATE_NAME, A.TEMPLATE_ORDER "
	],

	"INSERT_DSP_TEMPLATE_DETAIL":[
		" INSERT INTO DSP_TEMPLATE_DETAIL ",
		" ( TEMPLATE_NAME , WO_TYPE , SEQUENCE, TEMPLATE_ORDER , DEPENDANT_WO_ORDER , DIVS , DEPT,ASSIGNEE_TYPE, ASSIGNEE,  DURATION ,FORM_PAGES_NO,  LOGDATE , LOGNAME  ) ",
		" VALUES ",
		" ( :TEMPLATE_NAME , :WO_TYPE , :SEQUENCE, :TEMPLATE_ORDER , :DEPENDANT_WO_ORDER , :DIV ,:DEPT , :ASSIGNEE_TYPE, :ASSIGNEE, :DURATION ,:FORM_PAGES_NO,  :LOGDATE , :LOGNAME  ) "
	],
	"UPDATE_DSP_TEMPLATE_DETAIL":[
		" UPDATE  DSP_TEMPLATE_DETAIL ",
		" SET     TEMPLATE_NAME = :TEMPLATE_NAME ",
		 ", WO_TYPE = :WO_TYPE ",
		 ", SEQUENCE = :SEQUENCE ",
		 ", TEMPLATE_ORDER = :TEMPLATE_ORDER ",
		 ", DEPENDANT_WO_ORDER = :DEPENDANT_WO_ORDER ",
		 ", DIVS = :DIV ",
		 ", DEPT = :DEPT ",
		 ", ASSIGNEE_TYPE = :ASSIGNEE_TYPE ",
		 ", ASSIGNEE = :ASSIGNEE ",
		 ", DURATION = :DURATION ",
		 ", FORM_PAGES_NO = :FORM_PAGES_NO ",
		 ", LOGDATE = :LOGDATE ",
		 ", LOGNAME = :LOGNAME ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  AND  SEQUENCE = :SEQUENCE "
	],
	"DELETE_DSP_TEMPLATE_DETAIL":[
		" DELETE FROM DSP_TEMPLATE_DETAIL ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  AND  SEQUENCE = :SEQUENCE "
	],
	"GET_SOM_TABS_CODES_SPEC":[
		" SELECT CODENAME ,  CODETEXT ,  CODEALFA ,  VALUEALFA ,  CODELENGTH ,  VALUELENGTH ,  TEXTLENGTH ,  PARTCODENAME ,  CODE_PRIV ,  LAST_UPDATE ,  VALUE_UNIQUE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM SOM_TABS_CODES_SPEC ",
		" WHERE CODENAME = :CODENAME"

	],
	"GET_SOM_TABS_CODES_SPEC_QUERY":[
		" SELECT CODENAME ,  CODETEXT ,  CODEALFA ,  VALUEALFA ,  CODELENGTH ,  VALUELENGTH ,  TEXTLENGTH ,  PARTCODENAME ,  CODE_PRIV ,  LAST_UPDATE ,  VALUE_UNIQUE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM SOM_TABS_CODES_SPEC ",
		" :_WHERE "
	],
	"INSERT_SOM_TABS_CODES_SPEC":[
		" INSERT INTO SOM_TABS_CODES_SPEC ",
		" ( CODENAME  ,  CODETEXT  ,  CODEALFA  ,  VALUEALFA  ,  CODELENGTH  ,  VALUELENGTH  ,  TEXTLENGTH  ,  PARTCODENAME  ,  CODE_PRIV  ,  LAST_UPDATE  ,  VALUE_UNIQUE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :CODENAME  ,  :CODETEXT  ,  :CODEALFA  ,  :VALUEALFA  ,  :CODELENGTH  ,  :VALUELENGTH  ,  :TEXTLENGTH  ,  :PARTCODENAME  ,  :CODE_PRIV  ,  :LAST_UPDATE  ,  :VALUE_UNIQUE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "

	],
	"UPDATE_SOM_TABS_CODES_SPEC":[
		" UPDATE  SOM_TABS_CODES_SPEC ",
		" SET   CODENAME = :CODENAME " , 
	  ",  CODETEXT = :CODETEXT " , 
	  ",  CODEALFA = :CODEALFA " , 
	  ",  VALUEALFA = :VALUEALFA " , 
	  ",  CODELENGTH = :CODELENGTH " , 
	  ",  VALUELENGTH = :VALUELENGTH " , 
	  ",  TEXTLENGTH = :TEXTLENGTH " , 
	  ",  PARTCODENAME = :PARTCODENAME " , 
	  ",  CODE_PRIV = :CODE_PRIV " , 
	  ",  LAST_UPDATE = :LAST_UPDATE " , 
	  ",  VALUE_UNIQUE = :VALUE_UNIQUE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE  CODENAME = :CODENAME "

	],
	"DELETE_SOM_TABS_CODES_SPEC":[
		" DELETE FROM SOM_TABS_CODES_SPEC ",
		" WHERE  CODENAME = :CODENAME "

	],
	"GET_SOM_TABS_CODES":[
		" SELECT CODENAME ,  CODE ,  PARTCODE ,  LANGUAGE ,  CODETEXT_LANG ,  CODEVALUE_LANG ,  LAST_UPDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM SOM_TABS_CODES ",
		" WHERE CODENAME = :CODENAME AND CODE = :CODE",
		" ORDER BY CODENAME, CODE "
	]

	,
	"GET_SOM_TABS_CODES_QUERY":[
		" SELECT CODENAME ,  CODE ,  PARTCODE ,  LANGUAGE ,  CODETEXT_LANG ,  CODEVALUE_LANG ,  LAST_UPDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM SOM_TABS_CODES ",
		" :_WHERE ",
		" ORDER BY CODENAME, CODE "
	]

	,
	"INSERT_SOM_TABS_CODES":[
		" INSERT INTO SOM_TABS_CODES ",
		" ( CODENAME  ,  CODE  ,  PARTCODE  ,  LANGUAGE  ,  CODETEXT_LANG  ,  CODEVALUE_LANG  ,  LAST_UPDATE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :CODENAME  ,  :CODE  ,  :PARTCODE  ,  :LANGUAGE  ,  :CODETEXT_LANG  ,  :CODEVALUE_LANG  ,  :LAST_UPDATE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "

	]

	,
	"UPDATE_SOM_TABS_CODES":[
		" UPDATE  SOM_TABS_CODES ",
		" SET   CODENAME = :CODENAME " , 
	  ",  CODE = :CODE " , 
	  ",  PARTCODE = :PARTCODE " , 
	  ",  LANGUAGE = :LANGUAGE " , 
	  ",  CODETEXT_LANG = :CODETEXT_LANG " , 
	  ",  CODEVALUE_LANG = :CODEVALUE_LANG " , 
	  ",  LAST_UPDATE = :LAST_UPDATE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE  CODENAME = :CODENAME  AND  CODE = :CODE AND LANGUAGE = :LANGUAGE "

	]

	,
	"DELETE_SOM_TABS_CODES":[
		" DELETE FROM SOM_TABS_CODES ",
		" WHERE  CODENAME = :CODENAME  AND  CODE = :CODE AND LANGUAGE = :LANGUAGE "

	]

	,
	"GET_ADM_AUTHORITY":[
		" SELECT AUTH_TYPE ,  USERNAME ,  ROUTINE ,  AUTHLEVEL ,  DISP_FLAG ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_AUTHORITY ",
		" WHERE AUTH_TYPE = :AUTH_TYPE AND USERNAME = :USERNAME AND ROUTINE = :ROUTINE "

	],
	"GET_ADM_AUTHORITY_QUERY":[
		" SELECT AUTH_TYPE ,  USERNAME ,  ROUTINE ,  AUTHLEVEL ,  DISP_FLAG ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_AUTHORITY ",
		" :_WHERE "
	],
	"INSERT_ADM_AUTHORITY":[
		" INSERT INTO ADM_AUTHORITY ",
		" ( AUTH_TYPE  ,  USERNAME  ,  ROUTINE  ,  AUTHLEVEL  ,  DISP_FLAG  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :AUTH_TYPE  ,  :USERNAME  ,  :ROUTINE  ,  :AUTHLEVEL  ,  :DISP_FLAG  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "

	],
	"UPDATE_ADM_AUTHORITY":[
		" UPDATE  ADM_AUTHORITY ",
		" SET   AUTH_TYPE = :AUTH_TYPE " , 
	  ",  USERNAME = :USERNAME " , 
	  ",  ROUTINE = :ROUTINE " , 
	  ",  AUTHLEVEL = :AUTHLEVEL " , 
	  ",  DISP_FLAG = :DISP_FLAG " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
	  " WHERE AUTH_TYPE = :AUTH_TYPE AND USERNAME = :USERNAME AND ROUTINE = :ROUTINE "
	],
	"DELETE_ADM_AUTHORITY":[
		" DELETE FROM ADM_AUTHORITY ",
		" WHERE AUTH_TYPE = :AUTH_TYPE AND USERNAME = :USERNAME AND ROUTINE = :ROUTINE "

	],
	"GET_STM_DATA_BASE":[
		" SELECT DATA_BASE_ID ,  DATA_BASE ,  DB_USER ,  DB_PASS ,  LOGNAME ,  LOGDATE ,  DB_VENDOR",
		" FROM STM_DATA_BASE ",
		" WHERE DATA_BASE_ID = :DATA_BASE_ID AND DATA_BASE "
	],
	"GET_STM_DATA_BASE_QUERY":[
		" SELECT DATA_BASE_ID ,  DATA_BASE ,  DB_USER ,  DB_PASS ,  LOGNAME ,  LOGDATE ,  DB_VENDOR",
		" FROM STM_DATA_BASE ",
		" :_WHERE "
	],
	"INSERT_STM_DATA_BASE":[
		" INSERT INTO STM_DATA_BASE ",
		" ( DATA_BASE_ID  ,  DATA_BASE  ,  DB_USER  ,  DB_PASS  ,  LOGNAME  ,  LOGDATE  ,  DB_VENDOR  ) ",
		" VALUES ",
		" ( :DATA_BASE_ID  ,  :DATA_BASE  ,  :DB_USER  ,  :DB_PASS  ,  :LOGNAME  ,  :LOGDATE  ,  :DB_VENDOR  ) "

	],
	"UPDATE_STM_DATA_BASE":[
		" UPDATE  STM_DATA_BASE ",
		" SET   DATA_BASE_ID = :DATA_BASE_ID " , 
	  ",  DATA_BASE = :DATA_BASE " , 
	  ",  DB_USER = :DB_USER " , 
	  ",  DB_PASS = :DB_PASS " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  DB_VENDOR = :DB_VENDOR ",
	  " WHERE DATA_BASE_ID = :DATA_BASE_ID AND DATA_BASE "
	],
	"DELETE_STM_DATA_BASE":[
		" DELETE FROM STM_DATA_BASE ",
		" WHERE DATA_BASE_ID = :DATA_BASE_ID "
	],
	   "GET_LGC_HEAD_LOGIC_GROUP":[
		"SELECT A.LGC_MODULE, A.LGC_TYPE, B.LGC_GROUP, B.LGC_GROUP_ITEM, B.LGC_GROUP_FUNCTION, B.LGC_VALUE, B.LGC_FIELD_FROM, B.LGC_FIELD_TO, B.DISABLED, B.LGC_REMARK,  B.LGC_LEN, B.LOGNAME, ",
		" B.LOGDATE, B.LGC_FIELD, B.LGC_FROM_VAR2, B.LGC_LEN_VAR2, B.LGC_PARENT, B.LGC_VAR1, B.LGC_VAR2, B.LGC_VAR1_OFFSET, B.LGC_VAR2_OFFSET, B.LGC_FIELD_OFFSET, B.LGC_VAR1_OFFSET_FIELD, B.LGC_GROUP_ORDER ",
		" FROM LGC_HEAD A, LGC_LOGIC_GROUP B ",
		" WHERE A.LGC_MODULE = :LGC_MODULE AND A.LGC_TYPE = :LGC_TYPE AND A.LGC_CALL_TYPE = :LGC_CALL_TYPE",
		" AND A.LGC_MODULE = B.LGC_MODULE  AND A.LGC_TYPE = B.LGC_TYPE AND A.LGC_GROUP = B.LGC_GROUP ",
		"   ORDER BY B.LGC_GROUP, B.LGC_GROUP_ITEM "
	   ],

	"GET_LGC_HEAD_DETAIL":[
		" SELECT B.LGC_MODULE ,  B.LGC_TYPE ,  B.LGC_CALL_TYPE ,  B.LGC_CONDITION ,  B.LGC_ITEM ,  B.LGC_LGC_MODULE ,  B.LGC_LGC_TYPE ,  B.LGC_GROUP ,  B.LGC_GROUP_ITEM ,  B.LGC_FUNCTION ,  B.LGC_FIELD ,  B.LGC_PERIOD ,  B.LGC_LENGTH ,  B.LGC_OPERATION ,  B.LOG_VALUE_DISP ,  B.LGC_VALUE_TYPE ,  B.LGC_STAT_STR ,  B.LGC_VALUE ,  B.LGC_ACTION ,  B.LGC_REMARK ,  B.LGC_REASON_CODE ,  B.LGC_RET ,  B.LGC_PARENT ,  B.DISABLED ,  B.LOG_OPERATOR ,  B.LOG_PARENT ,  B.LOGNAME ,  B.LOGDATE ,  B.LGC_TABLE ,  B.LGC_FIELD_NAME ,  B.LGC_VFAL_FIELD ,  B.FLEX_FLD1 ,  B.FLEX_FLD2 ,  B.FLEX_FLD3 ,  B.FLEX_FLD4 ,  B.FLEX_FLD5",
		" FROM LGC_HEAD A, LGC_DETAIL B ",
		" WHERE A.LGC_MODULE = :LGC_MODULE AND A.LGC_TYPE = :LGC_TYPE AND A.LGC_CALL_TYPE = :LGC_CALL_TYPE",
		" AND A.LGC_MODULE = B.LGC_MODULE AND A.LGC_CALL_TYPE = B.LGC_CALL_TYPE AND A.LGC_TYPE = B.LGC_TYPE AND A.LGC_CONDITION = B.LGC_CONDITION ",
		" ORDER BY B.LGC_CONDITION ,  B.LGC_ITEM "

	],
	"GET_EIM_EXECUTED_COMMANDS":[
		" SELECT TRANSNO ,  CMDNO ,  COMMAND ,  TIMEOUT ,  CMDSTATUS ,  ERRORCODE ,  TRANSDATE ,  ME_READING ,  LTEST_VAL1 ,  LTEST_VAL2 ,  LTEST_VAL3 ,  LTEST_VAL4 ,  LTEST_VAL5 ,  LTEST_VAL6 ,  LTEST_VAL7 ,  LTEST_VAL8 ,  LTEST_VAL9 ,  LTEST_VAL10 ,  LTEST_RESULT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  CMD_LANGUAGE",
		" FROM EIM_EXECUTED_COMMANDS ",
		" WHERE TRANSNO = :TRANSNO ",
		" order by CMDNO "
	],
	"GET_EIM_EXECUTED_COMMANDS_QUERY":[
		" SELECT TRANSNO ,  CMDNO ,  COMMAND ,  TIMEOUT ,  CMDSTATUS ,  ERRORCODE ,  TRANSDATE ,  ME_READING ,  LTEST_VAL1 ,  LTEST_VAL2 ,  LTEST_VAL3 ,  LTEST_VAL4 ,  LTEST_VAL5 ,  LTEST_VAL6 ,  LTEST_VAL7 ,  LTEST_VAL8 ,  LTEST_VAL9 ,  LTEST_VAL10 ,  LTEST_RESULT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  CMD_LANGUAGE",
		" FROM EIM_EXECUTED_COMMANDS ",
		" :_WHERE ",
		" order by CMDNO "
	],
	"INSERT_EIM_EXECUTED_COMMANDS":[
		" INSERT INTO EIM_EXECUTED_COMMANDS ",
		" ( TRANSNO  ,  CMDNO  ,  COMMAND  ,  TIMEOUT  ,  CMDSTATUS  ,  ERRORCODE  ,  TRANSDATE  ,  ME_READING  ,  LTEST_VAL1  ,  LTEST_VAL2  ,  LTEST_VAL3  ,  LTEST_VAL4  ,  LTEST_VAL5  ,  LTEST_VAL6  ,  LTEST_VAL7  ,  LTEST_VAL8  ,  LTEST_VAL9  ,  LTEST_VAL10  ,  LTEST_RESULT  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  CMD_LANGUAGE  ) ",
		" VALUES ",
		" ( :TRANSNO  ,  :CMDNO  ,  :COMMAND  ,  :TIMEOUT  ,  :CMDSTATUS  ,  :ERRORCODE  ,  :TRANSDATE  ,  :ME_READING  ,  :LTEST_VAL1  ,  :LTEST_VAL2  ,  :LTEST_VAL3  ,  :LTEST_VAL4  ,  :LTEST_VAL5  ,  :LTEST_VAL6  ,  :LTEST_VAL7  ,  :LTEST_VAL8  ,  :LTEST_VAL9  ,  :LTEST_VAL10  ,  :LTEST_RESULT  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :CMD_LANGUAGE  ) "

	],
	"UPDATE_EIM_EXECUTED_COMMANDS":[
		" UPDATE  EIM_EXECUTED_COMMANDS ",
		" SET   TRANSNO = :TRANSNO " , 
	  ",  CMDNO = :CMDNO " , 
	  ",  COMMAND = :COMMAND " , 
	  ",  TIMEOUT = :TIMEOUT " , 
	  ",  CMDSTATUS = :CMDSTATUS " , 
	  ",  ERRORCODE = :ERRORCODE " , 
	  ",  TRANSDATE = :TRANSDATE " , 
	  ",  ME_READING = :ME_READING " , 
	  ",  LTEST_VAL1 = :LTEST_VAL1 " , 
	  ",  LTEST_VAL2 = :LTEST_VAL2 " , 
	  ",  LTEST_VAL3 = :LTEST_VAL3 " , 
	  ",  LTEST_VAL4 = :LTEST_VAL4 " , 
	  ",  LTEST_VAL5 = :LTEST_VAL5 " , 
	  ",  LTEST_VAL6 = :LTEST_VAL6 " , 
	  ",  LTEST_VAL7 = :LTEST_VAL7 " , 
	  ",  LTEST_VAL8 = :LTEST_VAL8 " , 
	  ",  LTEST_VAL9 = :LTEST_VAL9 " , 
	  ",  LTEST_VAL10 = :LTEST_VAL10 " , 
	  ",  LTEST_RESULT = :LTEST_RESULT " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  CMD_LANGUAGE = :CMD_LANGUAGE ",
		" WHERE TRANSNO = :TRANSNO "
	],
	"DELETE_EIM_EXECUTED_COMMANDS":[
		" DELETE FROM EIM_EXECUTED_COMMANDS ",
		" WHERE TRANSNO = :TRANSNO "

	],
	"GET_ADM_GROUPINFO":[
		" SELECT GROUPNAME ,  FULLNAME ,  DEFAULT_PRINTER ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_GROUPINFO ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"GET_ADM_GROUPINFO_QUERY":[
		" SELECT GROUPNAME ,  FULLNAME ,  DEFAULT_PRINTER ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_GROUPINFO ",
		" :_WHERE "
	],
	"INSERT_ADM_GROUPINFO":[
		" INSERT INTO ADM_GROUPINFO ",
		" ( GROUPNAME  ,  FULLNAME  ,  DEFAULT_PRINTER  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :GROUPNAME  ,  :FULLNAME  ,  :DEFAULT_PRINTER  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "
	],
	"UPDATE_ADM_GROUPINFO":[
		" UPDATE  ADM_GROUPINFO ",
		" SET   GROUPNAME = :GROUPNAME " , 
	  ",  FULLNAME = :FULLNAME " , 
	  ",  DEFAULT_PRINTER = :DEFAULT_PRINTER " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"DELETE_ADM_GROUPINFO":[
		" DELETE FROM ADM_GROUPINFO ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"GET_CEP_JOIN_DETAILS":[
		" SELECT JOIN_SEQ ,  STM_CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_CONDITION ,  LOGNAME ,  LOGDATE ,  VALUE1 ,  VALUE2 ,  CDR_TYPE_1 ,  DATA_ID ,  DATA_ID2 ,  JOIN_ORDER ,  SEARCH_TYPE ,  CMP_TYPE ,  OUTPUT_TYPE ,  JOIN_DEF ,  CEP_CDR_TYPE_1 ,  DISABLED ,  CMP_TYPE_1 ,  OUTPUT_TYPE_1 ,  LEN_TYPE",
		" FROM CEP_JOIN_DETAILS ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ like :JOIN_SEQ ",
		" ORDER by CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_DEF, JOIN_ORDER "

	],
	"GET_CEP_JOIN_DETAILS_QUERY":[
		" SELECT JOIN_SEQ ,  STM_CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_CONDITION ,  LOGNAME ,  LOGDATE ,  VALUE1 ,  VALUE2 ,  CDR_TYPE_1 ,  DATA_ID ,  DATA_ID2 ,  JOIN_ORDER ,  SEARCH_TYPE ,  CMP_TYPE ,  OUTPUT_TYPE ,  JOIN_DEF ,  CEP_CDR_TYPE_1 ,  DISABLED ,  CMP_TYPE_1 ,  OUTPUT_TYPE_1 ,  LEN_TYPE",
		" FROM CEP_JOIN_DETAILS ",
		" :_WHERE ",
		" ORDER by CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_DEF, JOIN_ORDER "
	],
	"INSERT_CEP_JOIN_DETAILS":[
		" INSERT INTO CEP_JOIN_DETAILS ",
		" ( JOIN_SEQ  ,  STM_CDR_TYPE_1  ,  CDR_TYPE_2  ,  JOIN_CONDITION  ,  LOGNAME  ,  LOGDATE  ,  VALUE1  ,  VALUE2  ,  CDR_TYPE_1  ,  DATA_ID  ,  DATA_ID2  ,  JOIN_ORDER  ,  SEARCH_TYPE  ,  CMP_TYPE  ,  OUTPUT_TYPE  ,  JOIN_DEF  ,  CEP_CDR_TYPE_1  ,  DISABLED  ,  CMP_TYPE_1  ,  OUTPUT_TYPE_1  ,  LEN_TYPE  ) ",
		" VALUES ",
		" ( :JOIN_SEQ  ,  :CDR_TYPE_1  ,  :CDR_TYPE_2  ,  :JOIN_CONDITION  ,  :LOGNAME  ,  :LOGDATE  ,  :VALUE1  ,  :VALUE2  ,  :CDR_TYPE_1  ,  :DATA_ID  ,  :DATA_ID2  ,  :JOIN_ORDER  ,  :SEARCH_TYPE  ,  :CMP_TYPE  ,  :OUTPUT_TYPE  ,  :JOIN_DEF  ,  :CEP_CDR_TYPE_1  ,  :DISABLED  ,  :CMP_TYPE_1  ,  :OUTPUT_TYPE_1  ,  :LEN_TYPE  ) "
	],
	"UPDATE_CEP_JOIN_DETAILS":[
		" UPDATE  CEP_JOIN_DETAILS ",
	  "   SET JOIN_CONDITION = :JOIN_CONDITION " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  VALUE1 = :VALUE1 " , 
	  ",  VALUE2 = :VALUE2 " , 
	  ",  CDR_TYPE_1 = :CDR_TYPE_1 " , 
  	  ",  STM_CDR_TYPE_1 = :CDR_TYPE_1 " , 
	  ",  DATA_ID = :DATA_ID " , 
	  ",  DATA_ID2 = :DATA_ID2 " , 
	  ",  JOIN_ORDER = :JOIN_ORDER " , 
	  ",  SEARCH_TYPE = :SEARCH_TYPE " , 
	  ",  CMP_TYPE = :CMP_TYPE " , 
	  ",  OUTPUT_TYPE = :OUTPUT_TYPE " , 
	  ",  JOIN_DEF = :JOIN_DEF " , 
	  ",  CEP_CDR_TYPE_1 = :CEP_CDR_TYPE_1 " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  CMP_TYPE_1 = :CMP_TYPE_1 " , 
	  ",  OUTPUT_TYPE_1 = :OUTPUT_TYPE_1 " , 
	  ",  LEN_TYPE = :LEN_TYPE ",
	  " WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ = :JOIN_SEQ "
	],
	"DELETE_CEP_JOIN_DETAILS":[
		" DELETE FROM CEP_JOIN_DETAILS ",
		" WHERE  CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ LIKE :JOIN_SEQ "
	],
	"GET_CEP_JOINS_DEF":[
		" SELECT CDR_TYPE_1 ,  CDR_TYPE_2 ,  LOGNAME ,  LOGDATE ,  WHERE_FILTER ,  LOAD_TO_MEM ,  SYNC_TABLE ,  SYNC_KEY_FIELD ,  SYNC_WHERE ,  SYNC_DATE_FIELD ,  SYNC_PROFILE ,  JOIN_DEF ,  FLOW_CODE",
		" FROM CEP_JOINS_DEF ",
		" WHERE FLOW_CODE = :FLOW_CODE and CDR_TYPE_1 = :CDR_TYPE_1  AND CDR_TYPE_2 = :CDR_TYPE_2   and JOIN_DEF = :JOIN_DEF  "

	],

	"GET_MAX_JOIN_DEF":[
		" SELECT  max(JOIN_DEF+0)+ 1 JOIN_DEF",
		" FROM CEP_JOINS_DEF ",
		" WHERE FLOW_CODE = :FLOW_CODE and CDR_TYPE_1 = :CDR_TYPE_1  AND CDR_TYPE_2 = :CDR_TYPE_2 "
	],
	"GET_CEP_JOINS_DEF_QUERY":[
		" SELECT CDR_TYPE_1 ,  CDR_TYPE_2 ,  LOGNAME ,  LOGDATE ,  WHERE_FILTER ,  LOAD_TO_MEM ,  SYNC_TABLE ,  SYNC_KEY_FIELD ,  SYNC_WHERE ,  SYNC_DATE_FIELD ,  SYNC_PROFILE ,  JOIN_DEF ,  FLOW_CODE",
		" FROM CEP_JOINS_DEF ",
		" :_WHERE "
	],
	"INSERT_CEP_JOINS_DEF":[
		" INSERT INTO CEP_JOINS_DEF ",
		" ( CDR_TYPE_1  ,  CDR_TYPE_2  ,  LOGNAME  ,  LOGDATE  ,  WHERE_FILTER  ,  LOAD_TO_MEM  ,  SYNC_TABLE  ,  SYNC_KEY_FIELD  ,  SYNC_WHERE  ,  SYNC_DATE_FIELD  ,  SYNC_PROFILE  ,  JOIN_DEF  ,  FLOW_CODE  ) ",
		" VALUES ",
		" ( :CDR_TYPE_1  ,  :CDR_TYPE_2  ,  :LOGNAME  ,  :LOGDATE  ,  :WHERE_FILTER  ,  :LOAD_TO_MEM  ,  :SYNC_TABLE  ,  :SYNC_KEY_FIELD  ,  :SYNC_WHERE  ,  :SYNC_DATE_FIELD  ,  :SYNC_PROFILE  ,  :JOIN_DEF  ,  :FLOW_CODE  ) "

	],
	"UPDATE_CEP_JOINS_DEF":[
		" UPDATE  CEP_JOINS_DEF ",
		" SET   CDR_TYPE_1 = :CDR_TYPE_1 " , 
	  ",  CDR_TYPE_2 = :CDR_TYPE_2 " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  WHERE_FILTER = :WHERE_FILTER " , 
	  ",  LOAD_TO_MEM = :LOAD_TO_MEM " , 
	  ",  SYNC_TABLE = :SYNC_TABLE " , 
	  ",  SYNC_KEY_FIELD = :SYNC_KEY_FIELD " , 
	  ",  SYNC_WHERE = :SYNC_WHERE " , 
	  ",  SYNC_DATE_FIELD = :SYNC_DATE_FIELD " , 
	  ",  SYNC_PROFILE = :SYNC_PROFILE " , 
	  ",  JOIN_DEF = :JOIN_DEF " , 
	  ",  FLOW_CODE = :FLOW_CODE ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF   "
	],
	"DELETE_CEP_JOINS_DEF":[
		" DELETE FROM CEP_JOINS_DEF ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND FLOW_CODE = :FLOW_CODE "

	],
	"GET_LGC_LOGIC_GROUP":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_GROUP_FUNCTION ,  LGC_VALUE ,  LGC_FIELD_FROM ,  LGC_FIELD_TO ,  DISABLED ,  LGC_REMARK ,  LGC_LEN ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_FIELD ,  LGC_FROM_VAR2 ,  LGC_LEN_VAR2 ,  LGC_PARENT ,  LGC_VAR1 ,  LGC_VAR2 ,  LGC_VAR1_OFFSET ,  LGC_VAR2_OFFSET ,  LGC_FIELD_OFFSET ,  LGC_VAR1_OFFSET_FIELD ,  LGC_GROUP_ORDER",
		" FROM LGC_LOGIC_GROUP ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE ",
		"   ORDER BY LGC_MODULE,LGC_TYPE,  LGC_GROUP,LGC_GROUP_ORDER,  LGC_GROUP_ITEM "

	],
	"GET_LGC_LOGIC_GROUP_QUERY":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_GROUP_FUNCTION ,  LGC_VALUE ,  LGC_FIELD_FROM ,  LGC_FIELD_TO ,  DISABLED ,  LGC_REMARK ,  LGC_LEN ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_FIELD ,  LGC_FROM_VAR2 ,  LGC_LEN_VAR2 ,  LGC_PARENT ,  LGC_VAR1 ,  LGC_VAR2 ,  LGC_VAR1_OFFSET ,  LGC_VAR2_OFFSET ,  LGC_FIELD_OFFSET ,  LGC_VAR1_OFFSET_FIELD ,  LGC_GROUP_ORDER",
		" FROM LGC_LOGIC_GROUP ",
		" :_WHERE ",
		"   ORDER BY LGC_MODULE,LGC_TYPE,  LGC_GROUP, LGC_GROUP_ORDER, LGC_GROUP_ITEM "

	],
	"GET_MENUS":[
		" SELECT MENU ,  MENU_TYPE ,  CHOICE ,  TEXT ,  AR_TEXT ,  LINE ,  LANGUAGE ,  EN_TEXT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  TYPE ,  FMODE",
		" FROM MENUS ",
		" WHERE MENU = :MENU ",
		" ORDER BY MENU, LINE "
	],
	"GET_MENUS_QUERY":[
		" SELECT MENU ,  MENU_TYPE ,  CHOICE ,  TEXT ,  AR_TEXT ,  LINE ,  LANGUAGE ,  EN_TEXT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  TYPE ,  FMODE",
		" FROM MENUS ",
		" :_WHERE ",
		" ORDER BY MENU, LINE "
	],
	"INSERT_MENUS":[
		" INSERT INTO MENUS ",
		" ( MENU  ,  MENU_TYPE  ,  CHOICE  ,  TEXT  ,  AR_TEXT  ,  LINE  ,  LANGUAGE  ,  EN_TEXT  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  TYPE  ,  FMODE  ) ",
		" VALUES ",
		" ( :MENU  ,  :MENU_TYPE  ,  :CHOICE  ,  :TEXT  ,  :AR_TEXT  ,  :LINE  ,  :LANGUAGE  ,  :EN_TEXT  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :TYPE  ,  :FMODE  ) "
	],
	"UPDATE_MENUS":[
		" UPDATE  MENUS ",
		" SET   MENU = :MENU " , 
	  ",  MENU_TYPE = :MENU_TYPE " , 
	  ",  CHOICE = :CHOICE " , 
	  ",  TEXT = :TEXT " , 
	  ",  AR_TEXT = :AR_TEXT " , 
	  ",  LINE = :LINE " , 
	  ",  LANGUAGE = :LANGUAGE " , 
	  ",  EN_TEXT = :EN_TEXT " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  TYPE = :TYPE " , 
	  ",  FMODE = :FMODE ",
		" WHERE MENU = :MENU ",
		" AND  CHOICE = :CHOICE " 
	],
	"DELETE_MENUS":[
		" DELETE FROM MENUS ",
		" WHERE MENU = :MENU ",
		" AND  CHOICE = :CHOICE " 
	],
	"GET_ROUTINES":[
		" SELECT ROUTINE ,  RTYPE ,  PROGRAM ,  CHOICE ,  ROUT_VER ,  ROUTINE_DESC ,  HELP_FILE ,  MODULE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ROUTINES ",
		" WHERE ROUTINE = :ROUTINE "
	],
	"GET_ROUTINES_QUERY":[
		" SELECT ROUTINE ,  RTYPE ,  PROGRAM ,  CHOICE ,  ROUT_VER ,  ROUTINE_DESC ,  HELP_FILE ,  MODULE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ROUTINES ",
		" :_WHERE "
	],
	"INSERT_ROUTINES":[
		" INSERT INTO ROUTINES ",
		" ( ROUTINE  ,  RTYPE  ,  PROGRAM  ,  CHOICE  ,  ROUT_VER  ,  ROUTINE_DESC  ,  HELP_FILE  ,  MODULE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :ROUTINE  ,  :RTYPE  ,  :PROGRAM  ,  :CHOICE  ,  :ROUT_VER  ,  :ROUTINE_DESC  ,  :HELP_FILE  ,  :MODULE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "

	],
	"UPDATE_ROUTINES":[
		" UPDATE  ROUTINES ",
		" SET   ROUTINE = :ROUTINE " , 
	  ",  RTYPE = :RTYPE " , 
	  ",  PROGRAM = :PROGRAM " , 
	  ",  CHOICE = :CHOICE " , 
	  ",  ROUT_VER = :ROUT_VER " , 
	  ",  ROUTINE_DESC = :ROUTINE_DESC " , 
	  ",  HELP_FILE = :HELP_FILE " , 
	  ",  MODULE = :MODULE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE CHOICE = :CHOICE "
	],
	"DELETE_ROUTINES":[
		" DELETE FROM ROUTINES ",
		" WHERE ROUTINE = :ROUTINE "

	],
	"GET_STM_MODULE_DATA":[
		" SELECT CDR_TYPE ,  DATA_ID ,  DATA_POS ,  DATA_LEN ,  DATA_NAME ,  DATA_TYPE ,  LOGNAME ,  LOGDATE ,  PROCESSING_CONTROL ,  FORMAT_MASK ,  DATA_FORMAT ,  DATA_DESC ,  DATA_CATEGORY ,  ICON_NAME ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  IF_NULL_VAL ,  LOG_FLAG ,  ISO_NAME ,  ISO_CODE ,  ISO_STRUCT ,  ISO_OUTLEN ,  ISO_VARLEN ,  DATA_LEVEL ,  OPTIONAL ,  DATA_ORDER ,  PARENT ,  CONTROL_DATA_ID ,  CONTROL_DATA_NAME ,  SAMPLE_DATA ,  PARENT_ID ,  CDR_TYPE_REF ,  DATA_ID_REF",
		" FROM STM_MODULE_DATA ",
		" WHERE CDR_TYPE = :CDR_TYPE AND DATA_ID = :DATA_ID"

	]

	,
	"GET_STM_MODULE_DATA_QUERY":[
		" SELECT CDR_TYPE ,  DATA_ID ,  DATA_POS ,  DATA_LEN ,  DATA_NAME ,  DATA_TYPE ,  LOGNAME ,  LOGDATE ,  PROCESSING_CONTROL ,  FORMAT_MASK ,  DATA_FORMAT ,  DATA_DESC ,  DATA_CATEGORY ,  ICON_NAME ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  IF_NULL_VAL ,  LOG_FLAG ,  ISO_NAME ,  ISO_CODE ,  ISO_STRUCT ,  ISO_OUTLEN ,  ISO_VARLEN ,  DATA_LEVEL ,  OPTIONAL ,  DATA_ORDER ,  PARENT ,  CONTROL_DATA_ID ,  CONTROL_DATA_NAME ,  SAMPLE_DATA ,  PARENT_ID ,  CDR_TYPE_REF ,  DATA_ID_REF",
		" FROM STM_MODULE_DATA ",
		" :_WHERE "
	]

	,
	"INSERT_STM_MODULE_DATA":[
		" INSERT INTO STM_MODULE_DATA ",
		" ( CDR_TYPE  ,  DATA_ID  ,  DATA_POS  ,  DATA_LEN  ,  DATA_NAME  ,  DATA_TYPE  ,  LOGNAME  ,  LOGDATE  ,  PROCESSING_CONTROL  ,  FORMAT_MASK  ,  DATA_FORMAT  ,  DATA_DESC  ,  DATA_CATEGORY  ,  ICON_NAME  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  IF_NULL_VAL  ,  LOG_FLAG  ,  ISO_NAME  ,  ISO_CODE  ,  ISO_STRUCT  ,  ISO_OUTLEN  ,  ISO_VARLEN  ,  DATA_LEVEL  ,  OPTIONAL  ,  DATA_ORDER  ,  PARENT  ,  CONTROL_DATA_ID  ,  CONTROL_DATA_NAME  ,  SAMPLE_DATA  ,  PARENT_ID  ,  CDR_TYPE_REF  ,  DATA_ID_REF  ) ",
		" VALUES ",
		" ( :CDR_TYPE  ,  :DATA_ID  ,  :DATA_POS  ,  :DATA_LEN  ,  :DATA_NAME  ,  :DATA_TYPE  ,  :LOGNAME  ,  :LOGDATE  ,  :PROCESSING_CONTROL  ,  :FORMAT_MASK  ,  :DATA_FORMAT  ,  :DATA_DESC  ,  :DATA_CATEGORY  ,  :ICON_NAME  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :IF_NULL_VAL  ,  :LOG_FLAG  ,  :ISO_NAME  ,  :ISO_CODE  ,  :ISO_STRUCT  ,  :ISO_OUTLEN  ,  :ISO_VARLEN  ,  :DATA_LEVEL  ,  :OPTIONAL  ,  :DATA_ORDER  ,  :PARENT  ,  :CONTROL_DATA_ID  ,  :CONTROL_DATA_NAME  ,  :SAMPLE_DATA  ,  :PARENT_ID  ,  :CDR_TYPE_REF  ,  :DATA_ID_REF  ) "

	]

	,
	"UPDATE_STM_MODULE_DATA":[
		" UPDATE  STM_MODULE_DATA ",
		" SET   CDR_TYPE = :CDR_TYPE " , 
	  ",  DATA_ID = :DATA_ID " , 
	  ",  DATA_POS = :DATA_POS " , 
	  ",  DATA_LEN = :DATA_LEN " , 
	  ",  DATA_NAME = :DATA_NAME " , 
	  ",  DATA_TYPE = :DATA_TYPE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  PROCESSING_CONTROL = :PROCESSING_CONTROL " , 
	  ",  FORMAT_MASK = :FORMAT_MASK " , 
	  ",  DATA_FORMAT = :DATA_FORMAT " , 
	  ",  DATA_DESC = :DATA_DESC " , 
	  ",  DATA_CATEGORY = :DATA_CATEGORY " , 
	  ",  ICON_NAME = :ICON_NAME " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  IF_NULL_VAL = :IF_NULL_VAL " , 
	  ",  LOG_FLAG = :LOG_FLAG " , 
	  ",  ISO_NAME = :ISO_NAME " , 
	  ",  ISO_CODE = :ISO_CODE " , 
	  ",  ISO_STRUCT = :ISO_STRUCT " , 
	  ",  ISO_OUTLEN = :ISO_OUTLEN " , 
	  ",  ISO_VARLEN = :ISO_VARLEN " , 
	  ",  DATA_LEVEL = :DATA_LEVEL " , 
	  ",  OPTIONAL = :OPTIONAL " , 
	  ",  DATA_ORDER = :DATA_ORDER " , 
	  ",  PARENT = :PARENT " , 
	  ",  CONTROL_DATA_ID = :CONTROL_DATA_ID " , 
	  ",  CONTROL_DATA_NAME = :CONTROL_DATA_NAME " , 
	  ",  SAMPLE_DATA = :SAMPLE_DATA " , 
	  ",  PARENT_ID = :PARENT_ID " , 
	  ",  CDR_TYPE_REF = :CDR_TYPE_REF " , 
	  ",  DATA_ID_REF = :DATA_ID_REF ",
		" WHERE  CDR_TYPE = :CDR_TYPE  AND  DATA_ID = :DATA_ID "

	]

	,
	"DELETE_STM_MODULE_DATA":[
		" DELETE FROM STM_MODULE_DATA ",
		" WHERE  CDR_TYPE = :CDR_TYPE  AND  DATA_ID = :DATA_ID "

	],
	"GET_LGC_HEAD":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  FROM_DATE ,  TO_DATE ,  LGC_CATEGORY ,  LGC_DESCRIPTION ,  DISABLED ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_ACTION ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_SAVE_LOG",
		" FROM LGC_HEAD ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE AND LGC_CALL_TYPE = :LGC_CALL_TYPE"

	],
	"GET_MAX_GROUP":[
		" SELECT max (LGC_GROUP+0)+10  LGC_GROUP ",
		" FROM LGC_HEAD ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE "
	],

	"GET_LGC_HEAD_QUERY":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  FROM_DATE ,  TO_DATE ,  LGC_CATEGORY ,  LGC_DESCRIPTION ,  DISABLED ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_ACTION ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_SAVE_LOG",
		" FROM LGC_HEAD ",
		" :_WHERE "
	]

	,
	"INSERT_LGC_HEAD":[
		" INSERT INTO LGC_HEAD ",
		" ( LGC_MODULE  ,  LGC_TYPE  ,  LGC_CALL_TYPE  ,  LGC_CONDITION  ,  FROM_DATE  ,  TO_DATE  ,  LGC_CATEGORY  ,  LGC_DESCRIPTION  ,  DISABLED  ,  LOGNAME  ,  LOGDATE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  LGC_ACTION  ,  LGC_REASON_CODE  ,  LGC_RET  ,  LGC_GROUP  ,  LGC_GROUP_ITEM  ,  LGC_SAVE_LOG  ) ",
		" VALUES ",
		" ( :LGC_MODULE  ,  :LGC_TYPE  ,  :LGC_CALL_TYPE  ,  :LGC_CONDITION  ,  :FROM_DATE  ,  :TO_DATE  ,  :LGC_CATEGORY  ,  :LGC_DESCRIPTION  ,  :DISABLED  ,  :LOGNAME  ,  :LOGDATE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :LGC_ACTION  ,  :LGC_REASON_CODE  ,  :LGC_RET  ,  :LGC_GROUP  ,  :LGC_GROUP_ITEM  ,  :LGC_SAVE_LOG  ) "

	]

	,
	"UPDATE_LGC_HEAD":[
		" UPDATE  LGC_HEAD ",
		" SET   LGC_MODULE = :LGC_MODULE " , 
	  ",  LGC_TYPE = :LGC_TYPE " , 
	  ",  LGC_CALL_TYPE = :LGC_CALL_TYPE " , 
	  ",  LGC_CONDITION = :LGC_CONDITION " , 
	  ",  FROM_DATE = :FROM_DATE " , 
	  ",  TO_DATE = :TO_DATE " , 
	  ",  LGC_CATEGORY = :LGC_CATEGORY " , 
	  ",  LGC_DESCRIPTION = :LGC_DESCRIPTION " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  LGC_ACTION = :LGC_ACTION " , 
	  ",  LGC_REASON_CODE = :LGC_REASON_CODE " , 
	  ",  LGC_RET = :LGC_RET " , 
	  ",  LGC_GROUP = :LGC_GROUP " , 
	  ",  LGC_GROUP_ITEM = :LGC_GROUP_ITEM " , 
	  ",  LGC_SAVE_LOG = :LGC_SAVE_LOG ",
		" WHERE  LGC_MODULE = :LGC_MODULE  AND  LGC_TYPE = :LGC_TYPE  AND  LGC_CALL_TYPE = :LGC_CALL_TYPE AND LGC_CONDITION LIKE :LGC_CONDITION "

	]

	,
	"DELETE_LGC_HEAD":[
		" DELETE FROM LGC_HEAD ",
		" WHERE  LGC_MODULE = :LGC_MODULE  AND  LGC_TYPE = :LGC_TYPE  AND  LGC_CALL_TYPE = :LGC_CALL_TYPE AND LGC_CONDITION LIKE :LGC_CONDITION"

	],
	"GET_ADM_DUAL":[
		" SELECT VAL",
		" FROM ADM_DUAL ",
		" WHERE KEY = :KEY"
	],
	"UPDATE_ADM_DUAL":[
		" UPDATE  ADM_DUAL ",
		" SET   VAL = VAL +1  " , 
		" WHERE KEY = :KEY"
	],
	"GET_DSP_WORK_ORDERS":[
		" SELECT WO_TYPE ,  WO_ORDER_NO ,  SUBNO ,  WO_STATUS ,  DIVS ,  DEPT ,  ASSIGNEE_TYPE ,  ASSIGNEE ,  PROMISED_DATE , ORDERED_DATE, COMPLETION_DATE ,  NOTES ,  PARENT_WO_ORDER_NO ,  ORDER_NO ,  ACTUAL_START_DATE , ATTACHMENTS, ACTUAL_END_DATE ,  LOGDATE ,  LOGNAME ,  TEMPLATE_NAME, TEMPLATE_ORDER",
		" FROM DSP_WORK_ORDERS ",
		" WHERE  WO_ORDER_NO = :WO_ORDER_NO"

	]
	,
	"GET_DSP_WORK_ORDERS_BY_ORDER_NO":[
		" SELECT A.WO_TYPE ,  A.WO_ORDER_NO ,  A.SUBNO ,  A.WO_STATUS ,  A.DIVS ,  A.DEPT ,  A.ASSIGNEE_TYPE ,  A.ASSIGNEE ,  A.PROMISED_DATE , A.ORDERED_DATE, A.COMPLETION_DATE ,  A.NOTES ,  A.PARENT_WO_ORDER_NO ,  A.ORDER_NO ,  A.ACTUAL_START_DATE , A.ATTACHMENTS, A.ACTUAL_END_DATE ,  A.LOGDATE ,  A.LOGNAME ,  A.TEMPLATE_NAME, A.TEMPLATE_ORDER, B.ORDER_FIELDS",
		" FROM DSP_WORK_ORDERS A , DSP_ORDERS B ",
		" WHERE  A.ORDER_NO = :ORDER_NO ",
		" AND  A.ORDER_NO = B.ORDER_NO ",
		" ORDER BY A.WO_ORDER_NO "
	]
	,

	"GET_DSP_WORK_ORDERS_QUERY":[
		" SELECT WO_TYPE ,  WO_ORDER_NO ,  SUBNO ,  WO_STATUS ,  DIVS ,  DEPT ,  ASSIGNEE_TYPE ,  ASSIGNEE ,  PROMISED_DATE ,ORDERED_DATE,  COMPLETION_DATE ,  NOTES ,  PARENT_WO_ORDER_NO ,  ORDER_NO ,  ACTUAL_START_DATE , ATTACHMENTS, ACTUAL_END_DATE ,  LOGDATE ,  LOGNAME ,  TEMPLATE_NAME, TEMPLATE_ORDER",
		" FROM DSP_WORK_ORDERS ",
		" :_WHERE "
	]

	,
	"INSERT_DSP_WORK_ORDERS":[
		" INSERT INTO DSP_WORK_ORDERS ",
		" ( WO_TYPE  ,  WO_ORDER_NO  ,  SUBNO  ,  WO_STATUS  ,  DIVS  ,  DEPT  ,  ASSIGNEE_TYPE  ,  ASSIGNEE  ,  PROMISED_DATE  , ORDERED_DATE, COMPLETION_DATE  ,  NOTES  ,  PARENT_WO_ORDER_NO  ,  ORDER_NO  ,  ACTUAL_START_DATE  , ATTACHMENTS, ACTUAL_END_DATE  ,  LOGDATE  ,  LOGNAME  ,  TEMPLATE_NAME , TEMPLATE_ORDER ) ",
		" VALUES ",
		" ( :WO_TYPE  ,  :WO_ORDER_NO  ,  :SUBNO  ,  :WO_STATUS  ,  :DIV  ,  :DEPT  ,  :ASSIGNEE_TYPE  ,  :ASSIGNEE  ,  :PROMISED_DATE  , :ORDERED_DATE, :COMPLETION_DATE  ,  :NOTES  ,  :PARENT_WO_ORDER_NO  ,  :ORDER_NO  ,  :ACTUAL_START_DATE  , :ATTACHMENTS,  :ACTUAL_END_DATE  ,  :LOGDATE  ,  :LOGNAME  ,  :TEMPLATE_NAME, :TEMPLATE_ORDER  ) "

	]

	,
	"UPDATE_DSP_WORK_ORDERS":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_TYPE = :WO_TYPE " , 
	  ",  SUBNO = :SUBNO " , 
	  ",  WO_STATUS = :WO_STATUS " , 
	  ",  DIVS = :DIV " , 
	  ",  DEPT = :DEPT " , 
	  ",  ASSIGNEE_TYPE = :ASSIGNEE_TYPE " , 
	  ",  ASSIGNEE = :ASSIGNEE " , 
	  ",  PROMISED_DATE = :PROMISED_DATE " , 
	  ",  ORDERED_DATE = :ORDERED_DATE " , 
	  ",  COMPLETION_DATE = :COMPLETION_DATE " , 
	  ",  NOTES = :NOTES " , 
	  ",  PARENT_WO_ORDER_NO = :PARENT_WO_ORDER_NO " , 
	  ",  ORDER_NO = :ORDER_NO " , 
	  ",  ACTUAL_START_DATE = :ACTUAL_START_DATE " , 
	  ",  ACTUAL_END_DATE = :ACTUAL_END_DATE " , 
	  ",  ATTACHMENTS = :ATTACHMENTS " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  TEMPLATE_NAME = :TEMPLATE_NAME ",
  	  ",  TEMPLATE_ORDER = :TEMPLATE_ORDER ",
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "
	],
	"UPDATE_DSP_WORK_ORDERS_PARENT":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_STATUS = :WO_STATUS " , 
		" WHERE   PARENT_WO_ORDER_NO = :PARENT_WO_ORDER_NO "
	]
	,

	"UPDATE_DSP_WORK_ORDERS_DISPATCH":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_STATUS = :WO_STATUS " , 
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "
	],
	"UPDATE_DSP_ORDERS_DISPATCH":[
		" UPDATE  DSP_ORDERS ",
		" SET   ORDER_STATUS = :ORDER_STATUS " , 
		" WHERE   ORDER_NO = :ORDER_NO "
	],
	"UPDATE_DSP_ORDERS_EXTERNAL_INFO":[
		" UPDATE  DSP_ORDERS ",
		" SET   ATTACHMENTS = :ATTACHMENTS " , 
		" ,   EXTERNAL_INFO = :EXTERNAL_INFO " , 
		" WHERE   ORDER_NO = :ORDER_NO "
	],

	"DELETE_DSP_WORK_ORDERS":[
		" DELETE FROM DSP_WORK_ORDERS ",
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "

	],
	"UPDATE_DSP_WORK_ORDERS_BY_TEMPLATE_ORDER":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_STATUS = :WO_STATUS " , 
		" WHERE   ORDER_NO = :ORDER_NO " ,
		" AND     TEMPLATE_ORDER = :TEMPLATE_ORDER "
	],
	"GET_MENU_ROUTINES":[
  " select choice , text , line , type1 ",
  " from (select b.choice ,  b.text,a.line, b.menu_type type1   ",
  " from menus a, menus b  where a.MENU = :MENU  and a.choice = b.menu  ",
  " union ",
  " select choice, text,line, menu_type type1 ",
  " from menus  where menu = :MENU ) a ",
  " where a.choice in ",
  " (select ROUTINE from adm_authority a, ADM_USER_INFORMATION b  ",
  " where AUTH_TYPE = 'G' and a.username = b.groupname and b.username = :USERNAME ",
  " union select ROUTINE from adm_authority where AUTH_TYPE = 'U' and username = :USERNAME  ",
  " union select CHOICE from menus a where menu = :MENU ) ",
  " order by line , type1 "
 ],
	"GET_ROUTINES_AUTHORITY":[
		" select AUTH_TYPE, ROUTINE , AUTHLEVEL, DISP_FLAG , ROUT_VER, ROUTINE_DESC  from  ",
		" ( select a.AUTH_TYPE, a.ROUTINE, AUTHLEVEL, DISP_FLAG , c.ROUT_VER, c.ROUTINE_DESC ",
		"  from adm_authority a, ADM_USER_INFORMATION b , routines c ",
		"   where AUTH_TYPE = 'G' ",
		"    and b.username = :USERNAME " ,
		"    and a.username = b.groupname ",
		"    and a.ROUTINE = C.ROUTINE ",
		" union ",
		" select a.AUTH_TYPE, a.ROUTINE,AUTHLEVEL,DISP_FLAG ,c.ROUT_VER, c.ROUTINE_DESC ",
		"   from adm_authority a , routines c ",
		"     where AUTH_TYPE = 'U' and username = :USERNAME " ,
		"      and a.ROUTINE = c.ROUTINE ",
		" ) a order by auth_type desc "
	],
	"GET_ALLOWED_MODULES":[
		" select CHOICE id,  text   ",
		"  from MENUS ",
		"   where MENU = :MENU ",
		"    and CHOICE in ( :CHOICES )  " 
	],
	"GET_ADM_QUERY_DEF":[
		" SELECT QUERY_ID ,  QUERY_NAME , QUERY_TYPE, MODULE,  SELECT_CLAUSE ,  FROM_CLAUSE ,  WHERE_CLAUSE ,  WHERE_MAND_CLAUSE ,  GROUP_ORDER_BY_CLAUSE",
		" FROM ADM_QUERY_DEF ",
		" WHERE QUERY_ID = :QUERY_ID "

	],
	"GET_ADM_QUERY_DEF_QUERY":[
		" SELECT QUERY_ID ,  QUERY_NAME , QUERY_TYPE, MODULE, SELECT_CLAUSE ,  FROM_CLAUSE ,  WHERE_CLAUSE ,  WHERE_MAND_CLAUSE ,  GROUP_ORDER_BY_CLAUSE",
		" FROM ADM_QUERY_DEF ",
		" :_WHERE "
	],
	"INSERT_ADM_QUERY_DEF":[
		" INSERT INTO ADM_QUERY_DEF ",
		" ( QUERY_ID  ,  QUERY_NAME  ,  QUERY_TYPE, MODULE, SELECT_CLAUSE  ,  FROM_CLAUSE  ,  WHERE_CLAUSE  ,  WHERE_MAND_CLAUSE  ,  GROUP_ORDER_BY_CLAUSE  ) ",
		" VALUES ",
		" ( (SELECT MAX(QUERY_ID)+1 from ADM_QUERY_DEF)  ,  :QUERY_NAME  , :QUERY_TYPE, :MODULE,  :SELECT_CLAUSE  ,  :FROM_CLAUSE  ,  :WHERE_CLAUSE  ,  :WHERE_MAND_CLAUSE  ,  :GROUP_ORDER_BY_CLAUSE  ) "

	],
	"UPDATE_ADM_QUERY_DEF":[
		" UPDATE  ADM_QUERY_DEF ",
		" SET   QUERY_ID = :QUERY_ID " , 
	  ",  QUERY_NAME = :QUERY_NAME " , 
	  ",  QUERY_TYPE = :QUERY_TYPE " , 
  	  ",  MODULE = :MODULE " , 
	  ",  SELECT_CLAUSE = :SELECT_CLAUSE " , 
	  ",  FROM_CLAUSE = :FROM_CLAUSE " , 
	  ",  WHERE_CLAUSE = :WHERE_CLAUSE " , 
	  ",  WHERE_MAND_CLAUSE = :WHERE_MAND_CLAUSE " , 
	  ",  GROUP_ORDER_BY_CLAUSE = :GROUP_ORDER_BY_CLAUSE ",
		" WHERE QUERY_ID = :QUERY_ID "

	],
	"DELETE_ADM_QUERY_DEF":[
		" DELETE FROM ADM_QUERY_DEF ",
		" WHERE QUERY_ID = :QUERY_ID "

	]
	 ,
	"GET_DSP_DYNAMIC_QUERY":[
		" SELECT QUERY_ID",
		" FROM DSP_DYNAMIC ",
		" :_WHERE "
	]
	,
	"GET_ADM_DASHBOARD_DEF":[
		" SELECT DASHBOARD_ID ,  DASHBOARD_NAME ,  MODULE ,  LOGNAME ,  LOGDATE ",
		" FROM ADM_DASHBOARD_DEF ",
		" WHERE DASHBOARD_ID = :DASHBOARD_ID"

	]
	,
	"GET_MAX_ADM_DASHBOARD_ID":[
		" SELECT MAX(DASHBOARD_ID)+1 DASHBOARD_ID  ",
		" FROM ADM_DASHBOARD_DEF "

	]

	,
	"GET_ADM_DASHBOARD_DEF_QUERY":[
		" SELECT DASHBOARD_ID ,  DASHBOARD_NAME ,  MODULE ,  LOGNAME ,  LOGDATE ",
		" FROM ADM_DASHBOARD_DEF ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_DASHBOARD_DEF":[
		" INSERT INTO ADM_DASHBOARD_DEF ",
		" ( DASHBOARD_ID  ,  DASHBOARD_NAME  ,  MODULE  ,  LOGNAME  ,  LOGDATE    ) ",
		" VALUES ",
		" ( :DASHBOARD_ID  ,  :DASHBOARD_NAME  ,  :MODULE  ,  :LOGNAME  ,  :LOGDATE    ) "

	]

	,
	"UPDATE_ADM_DASHBOARD_DEF":[
		" UPDATE  ADM_DASHBOARD_DEF ",
		" SET   DASHBOARD_ID = :DASHBOARD_ID " , 
	  ",  DASHBOARD_NAME = :DASHBOARD_NAME " , 
	  ",  MODULE = :MODULE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID "

	]

	,
	"DELETE_ADM_DASHBOARD_DEF":[
		" DELETE FROM ADM_DASHBOARD_DEF ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID "

	]
	,
	"GET_ADM_DASHBOARD_DETAIL":[
		" SELECT DASHBOARD_ID ,  CHART_ID ,  CHART_ORDER ,  QUERY_ID ,  CHART_TITLE ,  CHART_TYPE ,  CHART_WIDTH ,  CHART_HEIGHT ,  LOGNAME ,  LOGDATE",
		" FROM ADM_DASHBOARD_DETAIL ",
		" WHERE DASHBOARD_ID = :DASHBOARD_ID   ORDER BY DASHBOARD_ID,CHART_ORDER "

	]

	,
	"GET_ADM_DASHBOARD_DETAIL_QUERY":[
		" SELECT DASHBOARD_ID ,  CHART_ID ,  CHART_ORDER ,  QUERY_ID ,  CHART_TITLE ,  CHART_TYPE ,  CHART_WIDTH ,  CHART_HEIGHT ,  LOGNAME ,  LOGDATE",
		" FROM ADM_DASHBOARD_DETAIL ",
		" :_WHERE ORDER BY DASHBOARD_ID,CHART_ORDER "
	]

	,
	"INSERT_ADM_DASHBOARD_DETAIL":[
		" INSERT INTO ADM_DASHBOARD_DETAIL ",
		" ( DASHBOARD_ID  ,  CHART_ID  ,  CHART_ORDER  ,  QUERY_ID  ,  CHART_TITLE  ,  CHART_TYPE  ,  CHART_WIDTH  ,  CHART_HEIGHT  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :DASHBOARD_ID  ,  :CHART_ID  ,  :CHART_ORDER  ,  :QUERY_ID  ,  :CHART_TITLE  ,  :CHART_TYPE  ,  :CHART_WIDTH  ,  :CHART_HEIGHT  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_DASHBOARD_DETAIL":[
		" UPDATE  ADM_DASHBOARD_DETAIL ",
		" SET   DASHBOARD_ID = :DASHBOARD_ID " , 
	  ",  CHART_ID = :CHART_ID " , 
	  ",  CHART_ORDER = :CHART_ORDER " , 
	  ",  QUERY_ID = :QUERY_ID " , 
	  ",  CHART_TITLE = :CHART_TITLE " , 
	  ",  CHART_TYPE = :CHART_TYPE " , 
	  ",  CHART_WIDTH = :CHART_WIDTH " , 
	  ",  CHART_HEIGHT = :CHART_HEIGHT " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID  AND  CHART_ID = :CHART_ID "

	]

	,
	"DELETE_ADM_DASHBOARD_DETAIL":[
		" DELETE FROM ADM_DASHBOARD_DETAIL ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID  AND  CHART_ID = :CHART_ID "

	]

	,
	"GET_ADM_RULE_DEF":[
		" SELECT MODULE ,  RULE_ID , RULE_TRIGGER, ROUTINE,  QUERY_DEF , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED, RULE_DESCRIPTION,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_DEF ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  
	]

	,
	"GET_ADM_RULE_DEF_QUERY":[
		" SELECT MODULE ,  RULE_ID , RULE_TRIGGER, ROUTINE,  QUERY_DEF , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED,RULE_DESCRIPTION,   LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_DEF ",
		" :_WHERE "
	],

	"GET_MAX_ADM_RULE_ID":[
		" SELECT MAX(RULE_ID)+1 RULE_ID  ",
		" FROM ADM_RULE_DEF "
	]


	,
	"INSERT_ADM_RULE_DEF":[
		" INSERT INTO ADM_RULE_DEF ",
		" ( MODULE  ,  RULE_ID  , RULE_TRIGGER, ROUTINE,  QUERY_DEF  , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED,  RULE_DESCRIPTION, LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  , :RULE_TRIGGER, :ROUTINE,   :QUERY_DEF  ,  :RULE_KEY, :RESPONSE_DATA_ID, :RESPONSE_DATA_NAME,  :DISABLED, :RULE_DESCRIPTION,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_DEF":[
		" UPDATE  ADM_RULE_DEF ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  RULE_TRIGGER = :RULE_TRIGGER " , 
	  ",  ROUTINE = :ROUTINE " , 
	  ",  QUERY_DEF = :QUERY_DEF " , 
	  ",  RULE_KEY = :RULE_KEY " , 
 	  ",  RESPONSE_DATA_ID = :RESPONSE_DATA_ID " , 
  	  ",  RESPONSE_DATA_NAME = :RESPONSE_DATA_NAME " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  RULE_DESCRIPTION = :RULE_DESCRIPTION " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  

	]

	,
	"DELETE_ADM_RULE_DEF":[
		" DELETE FROM ADM_RULE_DEF ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  

	]

	,
	"GET_ADM_RULE_ITEM":[
		" SELECT MODULE ,  RULE_ID ,  ITEM ,  FIELD ,  OPERATION ,  FIELD_VALUE ,DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ITEM ",
		" WHERE MODULE = :MODULE AND RULE_ID = :RULE_ID AND ITEM = :ITEM"

	]

	,
	"GET_ADM_RULE_ITEM_QUERY":[
		" SELECT MODULE ,  RULE_ID ,  ITEM ,  FIELD ,  OPERATION ,  FIELD_VALUE , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ITEM ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_ITEM":[
		" INSERT INTO ADM_RULE_ITEM ",
		" ( MODULE  ,  RULE_ID  ,  ITEM  ,  FIELD  ,  OPERATION  ,  FIELD_VALUE  ,  DISABLED, LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  ,  :ITEM  ,  :FIELD  ,  :OPERATION  ,  :FIELD_VALUE  , :DISABLED,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_ITEM":[
		" UPDATE  ADM_RULE_ITEM ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ITEM = :ITEM " , 
	  ",  FIELD = :FIELD " , 
	  ",  OPERATION = :OPERATION " , 
	  ",  FIELD_VALUE = :FIELD_VALUE " , 
 	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ITEM = :ITEM "

	]

	,
	"DELETE_ADM_RULE_ITEM":[
		" DELETE FROM ADM_RULE_ITEM ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ITEM = :ITEM "

	]

	,
	"GET_ADM_RULE_ACTION":[
		" SELECT MODULE ,  RULE_ID ,  ACTION_ID ,  ACTION_ORDER ,  ACTION_CODE ,  SEND_TO , MAP_ID,  BODY_DATA , PARAMETER_DATA, EXTRA_DATA , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ACTION ",
		" WHERE MODULE = :MODULE AND RULE_ID = :RULE_ID AND ACTION_ID = :ACTION_ID"

	]

	,
	"GET_ADM_RULE_ACTION_QUERY":[
		" SELECT MODULE ,  RULE_ID ,  ACTION_ID ,  ACTION_ORDER ,  ACTION_CODE ,  SEND_TO , MAP_ID, BODY_DATA , PARAMETER_DATA, EXTRA_DATA , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ACTION ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_ACTION":[
		" INSERT INTO ADM_RULE_ACTION ",
		" ( MODULE  ,  RULE_ID  ,  ACTION_ID  ,  ACTION_ORDER  ,  ACTION_CODE  ,  SEND_TO  , MAP_ID,  BODY_DATA , PARAMETER_DATA ,  EXTRA_DATA  ,DISABLED,   LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  ,  :ACTION_ID  ,  :ACTION_ORDER  ,  :ACTION_CODE  ,  :SEND_TO  , :MAP_ID,  :BODY_DATA  , :PARAMETER_DATA,  :EXTRA_DATA  ,:DISABLED,   :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_ACTION":[
		" UPDATE  ADM_RULE_ACTION ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ACTION_ID = :ACTION_ID " , 
	  ",  ACTION_ORDER = :ACTION_ORDER " , 
	  ",  ACTION_CODE = :ACTION_CODE " , 
	  ",  SEND_TO = :SEND_TO " , 
	  ",  MAP_ID = :MAP_ID " , 
	  ",  BODY_DATA = :BODY_DATA " , 
	  ",  PARAMETER_DATA = :PARAMETER_DATA " , 
	  ",  EXTRA_DATA = :EXTRA_DATA " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ACTION_ID = :ACTION_ID "

	]

	,
	"DELETE_ADM_RULE_ACTION":[
		" DELETE FROM ADM_RULE_ACTION ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ACTION_ID = :ACTION_ID "

	]

	,
	"GET_ADM_RULE_HOST":[
		" SELECT HOST_ID, URL, PROTOCOL, HOST ,  PATH ,  PORT ,  HTTP_METHOD , RULE_AUTHORIZATION , RULE_HEADER, CONTENT_TYPE, SUCCESS_MSG,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST ",
		" WHERE HOST_ID like :HOST_ID"

	]

	,
	"GET_ADM_RULE_HOST_QUERY":[
		" SELECT HOST_ID, URL, PROTOCOL, HOST ,  PATH ,  PORT ,  HTTP_METHOD ,  RULE_AUTHORIZATION , RULE_HEADER, CONTENT_TYPE, SUCCESS_MSG,   LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_HOST":[
		" INSERT INTO ADM_RULE_HOST ",
		" ( HOST_ID, URL, PROTOCOL, HOST  ,  PATH  ,  PORT  ,  HTTP_METHOD  ,  RULE_AUTHORIZATION , RULE_HEADER, CONTENT_TYPE, SUCCESS_MSG,   LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :HOST_ID, :URL, :PROTOCOL,  :HOST  ,  :PATH  ,  :PORT  ,  :HTTP_METHOD  ,  :AUTHORIZATION , :HEADER, :CONTENT_TYPE, :SUCCESS_MSG,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_HOST":[
		" UPDATE  ADM_RULE_HOST ",
		" SET   HOST = :HOST " , 
	  ",  URL = :URL " , 
	  ",  PROTOCOL = :PROTOCOL " , 
	  ",  PATH = :PATH " , 
	  ",  PORT = :PORT " , 
	  ",  HTTP_METHOD = :HTTP_METHOD " , 
	  ",  RULE_AUTHORIZATION = :AUTHORIZATION " , 
	  ",  CONTENT_TYPE = :CONTENT_TYPE " , 
  	  ",  RULE_HEADER = :HEADER " , 
	  ",  SUCCESS_MSG = :SUCCESS_MSG " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  HOST_ID = :HOST_ID "

	]

	,
	"DELETE_ADM_RULE_HOST":[
		" DELETE FROM ADM_RULE_HOST ",
		" WHERE  HOST_ID = :HOST_ID "

	]

	,
	"GET_ADM_RULE_HOST_MAP":[
		" SELECT HOST_ID ,  MAP_ID ,MAP_NAME ,  XSLT_SEND ,  XSLT_RECEIVE ,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST_MAP ",
		" WHERE HOST_ID LIKE :HOST_ID "

	]

	,
	"GET_ADM_RULE_HOST_MAP_QUERY":[
		" SELECT HOST_ID ,  MAP_ID ,MAP_NAME,  XSLT_SEND ,  XSLT_RECEIVE ,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST_MAP ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_HOST_MAP":[
		" INSERT INTO ADM_RULE_HOST_MAP ",
		" ( HOST_ID  ,  MAP_ID  , MAP_NAME,  XSLT_SEND  ,  XSLT_RECEIVE  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :HOST_ID  ,  :MAP_ID  , :MAP_NAME,  :XSLT_SEND  ,  :XSLT_RECEIVE  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_HOST_MAP":[
		" UPDATE  ADM_RULE_HOST_MAP ",
		" SET   HOST_ID = :HOST_ID " , 
	  ",  MAP_ID = :MAP_ID " , 
	  ",  MAP_NAME = :MAP_NAME " , 
	  ",  XSLT_SEND = :XSLT_SEND " , 
	  ",  XSLT_RECEIVE = :XSLT_RECEIVE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  HOST_ID = :HOST_ID  AND  MAP_ID = :MAP_ID "

	]

	,
	"DELETE_ADM_RULE_HOST_MAP":[
		" DELETE FROM ADM_RULE_HOST_MAP ",
		" WHERE  HOST_ID = :HOST_ID  AND  MAP_ID = :MAP_ID "

	]

	,
	"GET_ADM_RULE_LOG":[
		" SELECT RULE_KEY , RULE_KEY_NAME,  RULE_ID ,  ACTION_ID ,  STATUS ,  MSG_RESPONSE ,  MODULE ,  SENT_DATE ,  MSG_RECEIVED ,  PARAMETER_SENT ,  BODY_SENT ,  LOGDATE ,  LOGNAME",
		" FROM ADM_RULE_LOG ",
		" WHERE RULE_KEY = :RULE_KEY AND RULE_KEY_NAME = :RULE_KEY_NAME AND RULE_ID = :RULE_ID AND SENT_DATE = :SENT_DATE", 
		" ORDER BY SENT_DATE DESC"
	]

	,
	"GET_ADM_RULE_LOG_QUERY":[
		" SELECT RULE_KEY , RULE_KEY_NAME,  RULE_ID ,  ACTION_ID ,  STATUS ,  MSG_RESPONSE ,  MODULE ,  SENT_DATE ,  MSG_RECEIVED ,  PARAMETER_SENT ,  BODY_SENT ,  LOGDATE ,  LOGNAME",
		" FROM ADM_RULE_LOG ",
		" :_WHERE ",
		" ORDER BY SENT_DATE DESC"
	]

	,
	"INSERT_ADM_RULE_LOG":[
		" INSERT INTO ADM_RULE_LOG ",
		" ( RULE_KEY  , RULE_KEY_NAME,  RULE_ID  ,  ACTION_ID  ,  STATUS  ,  MSG_RESPONSE  ,  MODULE  ,  SENT_DATE  ,  MSG_RECEIVED  ,  PARAMETER_SENT  ,  BODY_SENT  ,  LOGDATE  ,  LOGNAME  ) ",
		" VALUES ",
		" ( :RULE_KEY  , :RULE_KEY_NAME,  :RULE_ID  ,  :ACTION_ID  ,  :STATUS  ,  :MSG_RESPONSE  ,  :MODULE  ,  :SENT_DATE  ,  :MSG_RECEIVED  ,  :PARAMETER_SENT  ,  :BODY_SENT  ,  :LOGDATE  ,  :LOGNAME  ) "

	]

	,
	"UPDATE_ADM_RULE_LOG":[
		" UPDATE  ADM_RULE_LOG ",
		" SET   RULE_KEY = :RULE_KEY " , 
	  ",  RULE_KEY_NAME = :RULE_KEY_NAME " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ACTION_ID = :ACTION_ID " , 
	  ",  STATUS = :STATUS " , 
	  ",  MSG_RESPONSE = :MSG_RESPONSE " , 
	  ",  MODULE = :MODULE " , 
	  ",  SENT_DATE = :SENT_DATE " , 
	  ",  MSG_RECEIVED = :MSG_RECEIVED " , 
	  ",  PARAMETER_SENT = :PARAMETER_SENT " , 
	  ",  BODY_SENT = :BODY_SENT " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  LOGNAME = :LOGNAME ",
		" WHERE  RULE_KEY = :RULE_KEY AND RULE_KEY_NAME = :RULE_KEY_NAME AND  RULE_ID = :RULE_ID  AND  SENT_DATE = :SENT_DATE "

	]

	,
	"DELETE_ADM_RULE_LOG":[
		" DELETE FROM ADM_RULE_LOG ",
		" WHERE  RULE_KEY = :RULE_KEY AND RULE_KEY_NAME = :RULE_KEY_NAME AND  RULE_ID = :RULE_ID  AND  SENT_DATE = :SENT_DATE "

	]
	,
	"INSERT_EKYC_LOG":[
		" INSERT INTO EKYC_LOG ",
		" ( ORDER_NO  ,  WO_ORDER_NO  ,  WO_STATUS  ,  SUBNO, LOGDATE  ,  LOGNAME  ) ",
		" VALUES ",
		" ( :ORDER_NO  ,  :WO_ORDER_NO  ,  :WO_STATUS ,  :SUBNO, :LOGDATE  ,  :LOGNAME  ) "

	],
	"GET_ADM_RULE_DEF_RULE_ITEM":[
		" Select A.MODULE, A.RULE_ID, A.QUERY_DEF , A.RULE_KEY ,A.RESPONSE_DATA_ID, A.RESPONSE_DATA_NAME, A.ROUTINE,  B.ITEM, B.FIELD, B.OPERATION, B.FIELD_VALUE " ,
		"    from ADM_RULE_DEF A, ADM_RULE_ITEM B" ,
		"    where A.MODULE = B.MODULE " ,
		"      AND A.RULE_ID = B.RULE_ID " ,
		"     AND ( A.DISABLED = '0' or A.DISABLED is  null)  " ,
		"     AND ( B.DISABLED = '0' or B.DISABLED is  null)  " ,
		"     AND A.RULE_TRIGGER = :RULE_TRIGGER " ,
		"    order by A.MODULE, A.RULE_ID, B.ITEM "
	],
	"GET_ADM_RULE_DEF_RULE_ACTION":[
		" Select A.MODULE, A.RULE_ID, A.QUERY_DEF , A.ROUTINE, B.ACTION_ID, B.ACTION_CODE, B.SEND_TO,B.MAP_ID, B.BODY_DATA, B.PARAMETER_DATA, B.EXTRA_DATA " ,
		" from ADM_RULE_DEF A, ADM_RULE_ACTION B " ,
		" where A.MODULE = B.MODULE " ,
		"  AND A.RULE_ID = B.RULE_ID " ,
		"     AND ( A.DISABLED = '0' or A.DISABLED is  null)  " ,
		"     AND ( B.DISABLED = '0' or B.DISABLED is  null)  " ,
		"     AND A.RULE_TRIGGER = :RULE_TRIGGER " ,
		" order by A.MODULE, A.RULE_ID, B.ACTION_ORDER "
	],
	"GET_TEMP_EKYC_FLAGS":[
		" Select FINGER, BIO, ID, URL_PART " ,
		" from TEMP_EKYC_FLAGS " ,
		" where TEMPLATE_NAME = :TEMPLATE_NAME " 
	],
	"CREATE_ORDER":[
	]
	,
	"GET_EPM_FLOW":[
		" SELECT FLOW_CODE ,  FLOW_DESCRIPTION ,  MASTER_FLOW_CODE ,  ENGINE_LEVEL ,  CDR_TYPE ,  COMMIT_FLOW ,  COMMIT_STEP ,  COMMIT_RECORDS ,  FLOW_COMMENT ,  FLOW_CATEGORY",
		" FROM EPM_FLOW ",
		" WHERE FLOW_CODE = :FLOW_CODE"

	]
	,
	"GET_EPM_FLOW_QUERY":[
		" SELECT FLOW_CODE ,  FLOW_DESCRIPTION ,  MASTER_FLOW_CODE ,  ENGINE_LEVEL ,  CDR_TYPE ,  COMMIT_FLOW ,  COMMIT_STEP ,  COMMIT_RECORDS ,  FLOW_COMMENT ,  FLOW_CATEGORY",
		" FROM EPM_FLOW ",
		" :_WHERE "
	]

	,
	"INSERT_EPM_FLOW":[
		" INSERT INTO EPM_FLOW ",
		" ( FLOW_CODE  ,  FLOW_DESCRIPTION  ,  MASTER_FLOW_CODE  ,  ENGINE_LEVEL  ,  CDR_TYPE  ,  COMMIT_FLOW  ,  COMMIT_STEP  ,  COMMIT_RECORDS  ,  FLOW_COMMENT  ,  FLOW_CATEGORY  ) ",
		" VALUES ",
		" ( :FLOW_CODE  ,  :FLOW_DESCRIPTION  ,  :MASTER_FLOW_CODE  ,  :ENGINE_LEVEL  ,  :CDR_TYPE  ,  :COMMIT_FLOW  ,  :COMMIT_STEP  ,  :COMMIT_RECORDS  ,  :FLOW_COMMENT  ,  :FLOW_CATEGORY  ) "

	]

	,
	"UPDATE_EPM_FLOW":[
		" UPDATE  EPM_FLOW ",
		" SET   FLOW_CODE = :FLOW_CODE " , 
	  ",  FLOW_DESCRIPTION = :FLOW_DESCRIPTION " , 
	  ",  MASTER_FLOW_CODE = :MASTER_FLOW_CODE " , 
	  ",  ENGINE_LEVEL = :ENGINE_LEVEL " , 
	  ",  CDR_TYPE = :CDR_TYPE " , 
	  ",  COMMIT_FLOW = :COMMIT_FLOW " , 
	  ",  COMMIT_STEP = :COMMIT_STEP " , 
	  ",  COMMIT_RECORDS = :COMMIT_RECORDS " , 
	  ",  FLOW_COMMENT = :FLOW_COMMENT " , 
	  ",  FLOW_CATEGORY = :FLOW_CATEGORY ",
		" WHERE  FLOW_CODE = :FLOW_CODE "

	]

	,
	"DELETE_EPM_FLOW":[
		" DELETE FROM EPM_FLOW ",
		" WHERE  FLOW_CODE = :FLOW_CODE "

	],
	"GET_DSP_FORM_PAGE":[
		" SELECT FORM_NAME ,  PAGE_NO ,  PAGE_ORDER ,  PAGE_TYPE ,  PAGE_TITLE ,  PAGE_ICON , PAGE_HELP,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_PAGE ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO like :PAGE_NO",
		" ORDER BY  FORM_NAME, PAGE_ORDER   "

	]

	,
	"GET_DSP_FORM_PAGE_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  PAGE_ORDER ,  PAGE_TYPE ,  PAGE_TITLE ,  PAGE_ICON , PAGE_HELP  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_PAGE ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_ORDER   "
	]

	,
	"INSERT_DSP_FORM_PAGE":[
		" INSERT INTO DSP_FORM_PAGE ",
		" ( FORM_NAME  ,  PAGE_NO  ,  PAGE_ORDER  ,  PAGE_TYPE  ,  PAGE_TITLE  ,  PAGE_ICON  , PAGE_HELP,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :PAGE_ORDER  ,  :PAGE_TYPE  ,  :PAGE_TITLE  ,  :PAGE_ICON  , :PAGE_HELP,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_PAGE":[
		" UPDATE  DSP_FORM_PAGE ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  PAGE_ORDER = :PAGE_ORDER " , 
	  ",  PAGE_TYPE = :PAGE_TYPE " , 
	  ",  PAGE_TITLE = :PAGE_TITLE " , 
	  ",  PAGE_ICON = :PAGE_ICON " , 
	  ",  PAGE_HELP = :PAGE_HELP " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO "

	]

	,
	"DELETE_DSP_FORM_PAGE":[
		" DELETE FROM DSP_FORM_PAGE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO "

	],
	"GET_DSP_FORM_AREA":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  AREA_TYPE , AREA_TITLE , AREA_HELP, AREA_PROTECTED,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_AREA ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO like :PAGE_NO AND AREA_NO like :AREA_NO",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO  "

	]

	,
	"GET_DSP_FORM_AREA_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  AREA_TYPE , AREA_TITLE, AREA_HELP, AREA_PROTECTED,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_AREA ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO  "
	]

	,
	"INSERT_DSP_FORM_AREA":[
		" INSERT INTO DSP_FORM_AREA ",
		" ( FORM_NAME  ,  PAGE_NO  ,  AREA_NO  ,  AREA_TYPE  , AREA_TITLE, AREA_HELP, AREA_PROTECTED,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :AREA_NO  ,  :AREA_TYPE  , :AREA_TITLE, :AREA_HELP,:AREA_PROTECTED,   :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_AREA":[
		" UPDATE  DSP_FORM_AREA ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  AREA_NO = :AREA_NO " , 
	  ",  AREA_TYPE = :AREA_TYPE " , 
	  ",  AREA_TITLE = :AREA_TITLE " , 
	  ",  AREA_HELP = :AREA_HELP " , 
 	  ",  AREA_PROTECTED = :AREA_PROTECTED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO "

	]

	,
	"DELETE_DSP_FORM_AREA":[
		" DELETE FROM DSP_FORM_AREA ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO "

	],
	"GET_DSP_FORM_FIELDS":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT ,  FIELD_REQUIRED ,FIELD_FORMAT,  FIELD_HELP, FIELD_PROTECTED,FIELD_ENABLER,FIELD_SHOW_IF,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_FIELDS ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO LIKE :PAGE_NO AND AREA_NO LIKE :AREA_NO AND FIELD_ID LIKE :FIELD_ID ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO ,  FIELD_ROW, FIELD_ORDER "

	]

	,
	"GET_DSP_FORM_FIELDS_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT ,  FIELD_REQUIRED , FIELD_FORMAT, FIELD_HELP, FIELD_PROTECTED,FIELD_ENABLER,FIELD_SHOW_IF,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_FIELDS ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO ,  FIELD_ROW, FIELD_ORDER "
	]

	,
	"INSERT_DSP_FORM_FIELDS":[
		" INSERT INTO DSP_FORM_FIELDS ",
		" ( FORM_NAME  ,  PAGE_NO  ,  AREA_NO  ,  FIELD_ID  ,  FIELD_ROW  ,  FIELD_ORDER  ,  FIELD_NAME  ,  FIELD_TYPE  ,  FIELD_LOOKUP  ,  FIELD_DEFAULT  ,  FIELD_REQUIRED  , FIELD_FORMAT,FIELD_HELP, FIELD_PROTECTED,FIELD_ENABLER,FIELD_SHOW_IF,   LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :AREA_NO  ,  :FIELD_ID  ,  :FIELD_ROW  ,  :FIELD_ORDER  ,  :FIELD_NAME  ,  :FIELD_TYPE  ,  :FIELD_LOOKUP  ,  :FIELD_DEFAULT  ,  :FIELD_REQUIRED  , :FIELD_FORMAT, :FIELD_HELP, :FIELD_PROTECTED, :FIELD_ENABLER,:FIELD_SHOW_IF,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_FIELDS":[
		" UPDATE  DSP_FORM_FIELDS ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  AREA_NO = :AREA_NO " , 
	  ",  FIELD_ID = :FIELD_ID " , 
	  ",  FIELD_ROW = :FIELD_ROW " , 
	  ",  FIELD_ORDER = :FIELD_ORDER " , 
	  ",  FIELD_NAME = :FIELD_NAME " , 
	  ",  FIELD_TYPE = :FIELD_TYPE " , 
	  ",  FIELD_LOOKUP = :FIELD_LOOKUP " , 
	  ",  FIELD_DEFAULT = :FIELD_DEFAULT " , 
	  ",  FIELD_REQUIRED = :FIELD_REQUIRED " , 
	  ",  FIELD_FORMAT = :FIELD_FORMAT " , 
	  ",  FIELD_HELP = :FIELD_HELP " , 
	  ",  FIELD_PROTECTED = :FIELD_PROTECTED " , 
	  ",  FIELD_ENABLER = :FIELD_ENABLER " , 
	  ",  FIELD_SHOW_IF = :FIELD_SHOW_IF " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO  AND  FIELD_ID = :FIELD_ID "

	]

	,
	"DELETE_DSP_FORM_FIELDS":[
		" DELETE FROM DSP_FORM_FIELDS ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO  AND  FIELD_ID = :FIELD_ID "

	],
	"GET_TEST_ORDER":[
		" SELECT ID ,  SUBNO ,  TEMPLATE_NAME ,EKYC_SERVICE,   ORDER_FIELDS ,  NOTES , ORDER_NOTE,  EMAIL ,  NAME ,  CHANNEL, TOTAL_PRICE, TOTAL_TAX, DELIVERY_PRICE ",
		" FROM TEST_ORDER ",
		" WHERE ID = :ID",
		" order by ID "

	]

	,
	"GET_TEST_ORDER_QUERY":[
		" SELECT ID ,  SUBNO ,  TEMPLATE_NAME , EKYC_SERVICE,  ORDER_FIELDS ,  NOTES , ORDER_NOTE,  EMAIL ,  NAME ,  CHANNEL, TOTAL_PRICE, TOTAL_TAX, DELIVERY_PRICE ",
		" FROM TEST_ORDER ",
		" :_WHERE ",
		" order by ID "
	]

	,
	"INSERT_TEST_ORDER":[
		" INSERT INTO TEST_ORDER ",
		" ( ID  ,  SUBNO  ,  TEMPLATE_NAME  , EKYC_SERVICE,  ORDER_FIELDS  ,  NOTES  ,ORDER_NOTE,   EMAIL  ,  NAME  ,  CHANNEL , TOTAL_PRICE, TOTAL_TAX,  DELIVERY_PRICE   ) ",
		" VALUES ",
		" ( :ID  ,  :SUBNO  ,  :TEMPLATE_NAME  ,:EKYC_SERVICE,   :ORDER_FIELDS  ,  :NOTES  , :ORDER_NOTE,  :EMAIL  ,  :NAME  ,  :CHANNEL , :TOTAL_PRICE,:TOTAL_TAX,  :DELIVERY_PRICE  ) "

	]

	,
	"UPDATE_TEST_ORDER":[
		" UPDATE  TEST_ORDER ",
		" SET   ID = :ID " , 
	  ",  SUBNO = :SUBNO " , 
	  ",  TEMPLATE_NAME = :TEMPLATE_NAME " , 
	  ",  EKYC_SERVICE = :EKYC_SERVICE " , 
	  ",  ORDER_FIELDS = :ORDER_FIELDS " , 
	  ",  NOTES = :NOTES " , 
	  ",  ORDER_NOTE = :ORDER_NOTE " , 
	  ",  EMAIL = :EMAIL " , 
	  ",  NAME = :NAME " , 
	  ",  CHANNEL = :CHANNEL ",
	  ",  TOTAL_PRICE = :TOTAL_PRICE ",
	  ",  TOTAL_TAX = :TOTAL_TAX ",
	  ",  DELIVERY_PRICE = :DELIVERY_PRICE ",
		" WHERE  ID = :ID "

	]

	,
	"DELETE_TEST_ORDER":[
		" DELETE FROM TEST_ORDER ",
		" WHERE  ID = :ID "

	],
	"GET_TEST_ORDER_DETAIL":[
		" SELECT ID ,  SEQ ,  EKYC_SERVICE ,  QUANTITY ,  PRICE",
		" FROM TEST_ORDER_DETAIL ",
		" WHERE ID = :ID AND SEQ like :SEQ "

	]

	,
	"GET_TEST_ORDER_DETAIL_QUERY":[
		" SELECT ID ,  SEQ ,  EKYC_SERVICE ,  QUANTITY ,  PRICE",
		" FROM TEST_ORDER_DETAIL ",
		" :_WHERE "
	]

	,
	"INSERT_TEST_ORDER_DETAIL":[
		" INSERT INTO TEST_ORDER_DETAIL ",
		" ( ID  ,  SEQ  ,  EKYC_SERVICE  ,  QUANTITY  ,  PRICE  ) ",
		" VALUES ",
		" ( :ID  ,  :SEQ  ,  :EKYC_SERVICE  ,  :QUANTITY  ,  :PRICE  ) "

	]

	,
	"UPDATE_TEST_ORDER_DETAIL":[
		" UPDATE  TEST_ORDER_DETAIL ",
		" SET   ID = :ID " , 
	  ",  SEQ = :SEQ " , 
	  ",  EKYC_SERVICE = :EKYC_SERVICE " , 
	  ",  QUANTITY = :QUANTITY " , 
	  ",  PRICE = :PRICE ",
		" WHERE  ID = :ID  AND  SEQ = :SEQ "

	]

	,
	"DELETE_TEST_ORDER_DETAIL":[
		" DELETE FROM TEST_ORDER_DETAIL ",
		" WHERE  ID = :ID  AND  SEQ = :SEQ "

	],
	"GET_CCM_USER_INFO":[
		" SELECT USER_TYPE ,  USER_CODE ,  PARENT_ENTITY_TYPE ,  PARENT_ENTITY ,  PARENT_CC_CATEGORY ,  CCLOOP ,  CCLOOP_STAGE ,  CC_STAGE_LIMIT ,  CC_STATUS ,  LAST_CCLOOP_DATE ,  APPROVED ,  APPROVED_BY ,  CC_CATEGORY ,  CC_ACTION ,  ACTION_PARAM ,  REGION ,  FIN_INST ,  GRACE_PERIOD ,  AUTO_CATEGORY ,  LOGNAME ,  LOGDATE ,  CHARGE ,  EXCEPTION ,  ACTION_EXECUTED ,  OVERRIDE_BY ,  OVERRIDE_DATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  AGENT_ID ,  AFFECTED_BY_TYPE ,  AFFECTED_BY_CODE ,  ID_NO ,  ID_TYPE ,  NAME ,  ACTION_REF ,  CC_LIMIT ,  USE_LIMIT_PERC",
		" FROM CCM_USER_INFO ",
		" WHERE USER_CODE = :USER_CODE"

	]

	,
	"GET_CCM_USER_INFO_QUERY":[
		" SELECT USER_TYPE ,  USER_CODE ,  PARENT_ENTITY_TYPE ,  PARENT_ENTITY ,  PARENT_CC_CATEGORY ,  CCLOOP ,  CCLOOP_STAGE ,  CC_STAGE_LIMIT ,  CC_STATUS ,  LAST_CCLOOP_DATE ,  APPROVED ,  APPROVED_BY ,  CC_CATEGORY ,  CC_ACTION ,  ACTION_PARAM ,  REGION ,  FIN_INST ,  GRACE_PERIOD ,  AUTO_CATEGORY ,  LOGNAME ,  LOGDATE ,  CHARGE ,  EXCEPTION ,  ACTION_EXECUTED ,  OVERRIDE_BY ,  OVERRIDE_DATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  AGENT_ID ,  AFFECTED_BY_TYPE ,  AFFECTED_BY_CODE ,  ID_NO ,  ID_TYPE ,  NAME ,  ACTION_REF ,  CC_LIMIT ,  USE_LIMIT_PERC",
		" FROM CCM_USER_INFO ",
		" :_WHERE "
	]

	,
	"INSERT_CCM_USER_INFO":[
		" INSERT INTO CCM_USER_INFO ",
		" ( USER_TYPE  ,  USER_CODE  ,  PARENT_ENTITY_TYPE  ,  PARENT_ENTITY  ,  PARENT_CC_CATEGORY  ,  CCLOOP  ,  CCLOOP_STAGE  ,  CC_STAGE_LIMIT  ,  CC_STATUS  ,  LAST_CCLOOP_DATE  ,  APPROVED  ,  APPROVED_BY  ,  CC_CATEGORY  ,  CC_ACTION  ,  ACTION_PARAM  ,  REGION  ,  FIN_INST  ,  GRACE_PERIOD  ,  AUTO_CATEGORY  ,  LOGNAME  ,  LOGDATE  ,  CHARGE  ,  EXCEPTION  ,  ACTION_EXECUTED  ,  OVERRIDE_BY  ,  OVERRIDE_DATE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  AGENT_ID  ,  AFFECTED_BY_TYPE  ,  AFFECTED_BY_CODE  ,  ID_NO  ,  ID_TYPE  ,  NAME  ,  ACTION_REF  ,  CC_LIMIT  ,  USE_LIMIT_PERC  ) ",
		" VALUES ",
		" ( :USER_TYPE  ,  :USER_CODE  ,  :PARENT_ENTITY_TYPE  ,  :PARENT_ENTITY  ,  :PARENT_CC_CATEGORY  ,  :CCLOOP  ,  :CCLOOP_STAGE  ,  :CC_STAGE_LIMIT  ,  :CC_STATUS  ,  :LAST_CCLOOP_DATE  ,  :APPROVED  ,  :APPROVED_BY  ,  :CC_CATEGORY  ,  :CC_ACTION  ,  :ACTION_PARAM  ,  :REGION  ,  :FIN_INST  ,  :GRACE_PERIOD  ,  :AUTO_CATEGORY  ,  :LOGNAME  ,  :LOGDATE  ,  :CHARGE  ,  :EXCEPTION  ,  :ACTION_EXECUTED  ,  :OVERRIDE_BY  ,  :OVERRIDE_DATE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :AGENT_ID  ,  :AFFECTED_BY_TYPE  ,  :AFFECTED_BY_CODE  ,  :ID_NO  ,  :ID_TYPE  ,  :NAME  ,  :ACTION_REF  ,  :CC_LIMIT  ,  :USE_LIMIT_PERC  ) "

	]

	,
	"UPDATE_CCM_USER_INFO":[
		" UPDATE  CCM_USER_INFO ",
		" SET   USER_TYPE = :USER_TYPE " , 
	  ",  USER_CODE = :USER_CODE " , 
	  ",  PARENT_ENTITY_TYPE = :PARENT_ENTITY_TYPE " , 
	  ",  PARENT_ENTITY = :PARENT_ENTITY " , 
	  ",  PARENT_CC_CATEGORY = :PARENT_CC_CATEGORY " , 
	  ",  CCLOOP = :CCLOOP " , 
	  ",  CCLOOP_STAGE = :CCLOOP_STAGE " , 
	  ",  CC_STAGE_LIMIT = :CC_STAGE_LIMIT " , 
	  ",  CC_STATUS = :CC_STATUS " , 
	  ",  LAST_CCLOOP_DATE = :LAST_CCLOOP_DATE " , 
	  ",  APPROVED = :APPROVED " , 
	  ",  APPROVED_BY = :APPROVED_BY " , 
	  ",  CC_CATEGORY = :CC_CATEGORY " , 
	  ",  CC_ACTION = :CC_ACTION " , 
	  ",  ACTION_PARAM = :ACTION_PARAM " , 
	  ",  REGION = :REGION " , 
	  ",  FIN_INST = :FIN_INST " , 
	  ",  GRACE_PERIOD = :GRACE_PERIOD " , 
	  ",  AUTO_CATEGORY = :AUTO_CATEGORY " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  CHARGE = :CHARGE " , 
	  ",  EXCEPTION = :EXCEPTION " , 
	  ",  ACTION_EXECUTED = :ACTION_EXECUTED " , 
	  ",  OVERRIDE_BY = :OVERRIDE_BY " , 
	  ",  OVERRIDE_DATE = :OVERRIDE_DATE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  AGENT_ID = :AGENT_ID " , 
	  ",  AFFECTED_BY_TYPE = :AFFECTED_BY_TYPE " , 
	  ",  AFFECTED_BY_CODE = :AFFECTED_BY_CODE " , 
	  ",  ID_NO = :ID_NO " , 
	  ",  ID_TYPE = :ID_TYPE " , 
	  ",  NAME = :NAME " , 
	  ",  ACTION_REF = :ACTION_REF " , 
	  ",  CC_LIMIT = :CC_LIMIT " , 
	  ",  USE_LIMIT_PERC = :USE_LIMIT_PERC ",
		" WHERE  USER_CODE = :USER_CODE "

	]

	,
	"DELETE_CCM_USER_INFO":[
		" DELETE FROM CCM_USER_INFO ",
		" WHERE  USER_CODE = :USER_CODE "

	],
	"GET_CRM_USER_INFO":[
		" SELECT SUBSCR_TYPE ,  AREA ,  SUBNO ,  CONTRNO ,  GROUPNO ,  STATUS ,  APT ,  BNO ,  APARTMENT ,  PO_BOX ,  DIRCODE ,  APPLIED ,  CONDATE ,  DISCON ,  CHANGED ,  LASTORDER ,  INFO ,  INFO2 ,  INFO3 ,  SERVNO ,  SPECDEB ,  PROFESSION ,  DIRRDY ,  DEPOSIT ,  CURR_VOL_INT ,  CURR_VOL_LOC ,  PREV_VOL_INT ,  PREV_VOL_LOC ,  PROFILE ,  NEXT_VOL_LOC ,  NEXT_VOL_INT ,  LAST_CALL_DATE ,  LAST_CALL_TIME ,  OLD_CONTRNO ,  TRSF_DATE ,  SUB_LIMIT ,  3) ,  NUM_TYPE ,  BS_TYPE ,  LASTNAME ,  POSTAL_CODE ,  POSTAL_ADR ,  ZIP_CODE ,  TITLE ,  NAME ,  FIRST_NAME ,  BIN_BINT ,  SECOND_NAME ,  BIN ,  THIRD_NAME ,  LAST_NAME ,  AR_TITLE ,  AR_NAME ,  AR_FIRST_NAME ,  AR_BIN_BINT ,  AR_SECOND_NAME ,  AR_BIN ,  AR_THIRD_NAME ,  AR_LAST_NAME ,  CO ,  POST_AREA ,  STREET_NO ,  STREET ,  BUILD_NO ,  BUILDING ,  ADDRS_AREA ,  ADDRS_BLOCK ,  ADDRESS ,  IVR_LANG ,  PERSONAL_ID ,  EXC ,  CARDNO ,  CARD_TYPE ,  INT_RETAILER ,  PREPOST_PAID ,  TARIFF_PROFILE ,  PP_FROM_DATE ,  SP_NO ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  CALLER_SUBSCR_TYPE ,  CALLER_AREA ,  CONT_SUB ,  ID_TYPE ,  ID_NO ,  NUM_CHARGED ,  RESERVATION_CODE ,  EXT_RETAILER ,  PROMOTION ,  NAT_CODE ,  GENDER ,  DATE_OF_BIRTH ,  REASON_CODE ,  SEND_BILL_SMS ,  SEND_SMS_OPENBAL ,  MAIN_GSM ,  DISTRICT_NUMBER ,  FLOOR ,  INVOICE_ADDRESS ,  POSTAL_ZONE ,  POSTAL_ZONE_EXT ,  PO_NAME ,  CAZA ,  STAFF_NO ,  LANGUAGE ,  REGION",
		" FROM CRM_USER_INFO ",
		" WHERE SUBNO = :SUBNO"

	]

	,
	"GET_CRM_USER_INFO_QUERY":[
		" SELECT SUBSCR_TYPE ,  AREA ,  SUBNO ,  CONTRNO ,  GROUPNO ,  STATUS ,  APT ,  BNO ,  APARTMENT ,  PO_BOX ,  DIRCODE ,  APPLIED ,  CONDATE ,  DISCON ,  CHANGED ,  LASTORDER ,  INFO ,  INFO2 ,  INFO3 ,  SERVNO ,  SPECDEB ,  PROFESSION ,  DIRRDY ,  DEPOSIT ,  CURR_VOL_INT ,  CURR_VOL_LOC ,  PREV_VOL_INT ,  PREV_VOL_LOC ,  PROFILE ,  NEXT_VOL_LOC ,  NEXT_VOL_INT ,  LAST_CALL_DATE ,  LAST_CALL_TIME ,  OLD_CONTRNO ,  TRSF_DATE ,  SUB_LIMIT ,    NUM_TYPE ,  BS_TYPE ,  LASTNAME ,  POSTAL_CODE ,  POSTAL_ADR ,  ZIP_CODE ,  TITLE ,  NAME ,  FIRST_NAME ,  BIN_BINT ,  SECOND_NAME ,  BIN ,  THIRD_NAME ,  LAST_NAME ,  AR_TITLE ,  AR_NAME ,  AR_FIRST_NAME ,  AR_BIN_BINT ,  AR_SECOND_NAME ,  AR_BIN ,  AR_THIRD_NAME ,  AR_LAST_NAME ,  CO ,  POST_AREA ,  STREET_NO ,  STREET ,  BUILD_NO ,  BUILDING ,  ADDRS_AREA ,  ADDRS_BLOCK ,  ADDRESS ,  IVR_LANG ,  PERSONAL_ID ,  EXC ,  CARDNO ,  CARD_TYPE ,  INT_RETAILER ,  PREPOST_PAID ,  TARIFF_PROFILE ,  PP_FROM_DATE ,  SP_NO ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  CALLER_SUBSCR_TYPE ,  CALLER_AREA ,  CONT_SUB ,  ID_TYPE ,  ID_NO ,  NUM_CHARGED ,  RESERVATION_CODE ,  EXT_RETAILER ,  PROMOTION ,  NAT_CODE ,  GENDER ,  DATE_OF_BIRTH ,  REASON_CODE ,  SEND_BILL_SMS ,  SEND_SMS_OPENBAL ,  MAIN_GSM ,  DISTRICT_NUMBER ,  FLOOR ,  INVOICE_ADDRESS ,  POSTAL_ZONE ,  POSTAL_ZONE_EXT ,  PO_NAME ,  CAZA ,  STAFF_NO ,  LANGUAGE ,  REGION",
		" FROM CRM_USER_INFO ",
		" :_WHERE "
	]

	,
	"INSERT_CRM_USER_INFO":[
		" INSERT INTO CRM_USER_INFO ",
		" ( SUBSCR_TYPE  ,  AREA  ,  SUBNO  ,  CONTRNO  ,  GROUPNO  ,  STATUS  ,  APT  ,  BNO  ,  APARTMENT  ,  PO_BOX  ,  DIRCODE  ,  APPLIED  ,  CONDATE  ,  DISCON  ,  CHANGED  ,  LASTORDER  ,  INFO  ,  INFO2  ,  INFO3  ,  SERVNO  ,  SPECDEB  ,  PROFESSION  ,  DIRRDY  ,  DEPOSIT  ,  CURR_VOL_INT  ,  CURR_VOL_LOC  ,  PREV_VOL_INT  ,  PREV_VOL_LOC  ,  PROFILE  ,  NEXT_VOL_LOC  ,  NEXT_VOL_INT  ,  LAST_CALL_DATE  ,  LAST_CALL_TIME  ,  OLD_CONTRNO  ,  TRSF_DATE  ,  SUB_LIMIT  ,    NUM_TYPE  ,  BS_TYPE  ,  LASTNAME  ,  POSTAL_CODE  ,  POSTAL_ADR  ,  ZIP_CODE  ,  TITLE  ,  NAME  ,  FIRST_NAME  ,  BIN_BINT  ,  SECOND_NAME  ,  BIN  ,  THIRD_NAME  ,  LAST_NAME  ,  AR_TITLE  ,  AR_NAME  ,  AR_FIRST_NAME  ,  AR_BIN_BINT  ,  AR_SECOND_NAME  ,  AR_BIN  ,  AR_THIRD_NAME  ,  AR_LAST_NAME  ,  CO  ,  POST_AREA  ,  STREET_NO  ,  STREET  ,  BUILD_NO  ,  BUILDING  ,  ADDRS_AREA  ,  ADDRS_BLOCK  ,  ADDRESS  ,  IVR_LANG  ,  PERSONAL_ID  ,  EXC  ,  CARDNO  ,  CARD_TYPE  ,  INT_RETAILER  ,  PREPOST_PAID  ,  TARIFF_PROFILE  ,  PP_FROM_DATE  ,  SP_NO  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  CALLER_SUBSCR_TYPE  ,  CALLER_AREA  ,  CONT_SUB  ,  ID_TYPE  ,  ID_NO  ,  NUM_CHARGED  ,  RESERVATION_CODE  ,  EXT_RETAILER  ,  PROMOTION  ,  NAT_CODE  ,  GENDER  ,  DATE_OF_BIRTH  ,  REASON_CODE  ,  SEND_BILL_SMS  ,  SEND_SMS_OPENBAL  ,  MAIN_GSM  ,  DISTRICT_NUMBER  ,  FLOOR  ,  INVOICE_ADDRESS  ,  POSTAL_ZONE  ,  POSTAL_ZONE_EXT  ,  PO_NAME  ,  CAZA  ,  STAFF_NO  ,  LANGUAGE  ,  REGION  ) ",
		" VALUES ",
		" ( :SUBSCR_TYPE  ,  :AREA  ,  :SUBNO  ,  :CONTRNO  ,  :GROUPNO  ,  :STATUS  ,  :APT  ,  :BNO  ,  :APARTMENT  ,  :PO_BOX  ,  :DIRCODE  ,  :APPLIED  ,  :CONDATE  ,  :DISCON  ,  :CHANGED  ,  :LASTORDER  ,  :INFO  ,  :INFO2  ,  :INFO3  ,  :SERVNO  ,  :SPECDEB  ,  :PROFESSION  ,  :DIRRDY  ,  :DEPOSIT  ,  :CURR_VOL_INT  ,  :CURR_VOL_LOC  ,  :PREV_VOL_INT  ,  :PREV_VOL_LOC  ,  :PROFILE  ,  :NEXT_VOL_LOC  ,  :NEXT_VOL_INT  ,  :LAST_CALL_DATE  ,  :LAST_CALL_TIME  ,  :OLD_CONTRNO  ,  :TRSF_DATE  ,  :SUB_LIMIT  ,    :NUM_TYPE  ,  :BS_TYPE  ,  :LASTNAME  ,  :POSTAL_CODE  ,  :POSTAL_ADR  ,  :ZIP_CODE  ,  :TITLE  ,  :NAME  ,  :FIRST_NAME  ,  :BIN_BINT  ,  :SECOND_NAME  ,  :BIN  ,  :THIRD_NAME  ,  :LAST_NAME  ,  :AR_TITLE  ,  :AR_NAME  ,  :AR_FIRST_NAME  ,  :AR_BIN_BINT  ,  :AR_SECOND_NAME  ,  :AR_BIN  ,  :AR_THIRD_NAME  ,  :AR_LAST_NAME  ,  :CO  ,  :POST_AREA  ,  :STREET_NO  ,  :STREET  ,  :BUILD_NO  ,  :BUILDING  ,  :ADDRS_AREA  ,  :ADDRS_BLOCK  ,  :ADDRESS  ,  :IVR_LANG  ,  :PERSONAL_ID  ,  :EXC  ,  :CARDNO  ,  :CARD_TYPE  ,  :INT_RETAILER  ,  :PREPOST_PAID  ,  :TARIFF_PROFILE  ,  :PP_FROM_DATE  ,  :SP_NO  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :CALLER_SUBSCR_TYPE  ,  :CALLER_AREA  ,  :CONT_SUB  ,  :ID_TYPE  ,  :ID_NO  ,  :NUM_CHARGED  ,  :RESERVATION_CODE  ,  :EXT_RETAILER  ,  :PROMOTION  ,  :NAT_CODE  ,  :GENDER  ,  :DATE_OF_BIRTH  ,  :REASON_CODE  ,  :SEND_BILL_SMS  ,  :SEND_SMS_OPENBAL  ,  :MAIN_GSM  ,  :DISTRICT_NUMBER  ,  :FLOOR  ,  :INVOICE_ADDRESS  ,  :POSTAL_ZONE  ,  :POSTAL_ZONE_EXT  ,  :PO_NAME  ,  :CAZA  ,  :STAFF_NO  ,  :LANGUAGE  ,  :REGION  ) "

	]

	,
	"UPDATE_CRM_USER_INFO":[
		" UPDATE  CRM_USER_INFO ",
		" SET   SUBSCR_TYPE = :SUBSCR_TYPE " , 
	  ",  AREA = :AREA " , 
	  ",  SUBNO = :SUBNO " , 
	  ",  CONTRNO = :CONTRNO " , 
	  ",  GROUPNO = :GROUPNO " , 
	  ",  STATUS = :STATUS " , 
	  ",  APT = :APT " , 
	  ",  BNO = :BNO " , 
	  ",  APARTMENT = :APARTMENT " , 
	  ",  PO_BOX = :PO_BOX " , 
	  ",  DIRCODE = :DIRCODE " , 
	  ",  APPLIED = :APPLIED " , 
	  ",  CONDATE = :CONDATE " , 
	  ",  DISCON = :DISCON " , 
	  ",  CHANGED = :CHANGED " , 
	  ",  LASTORDER = :LASTORDER " , 
	  ",  INFO = :INFO " , 
	  ",  INFO2 = :INFO2 " , 
	  ",  INFO3 = :INFO3 " , 
	  ",  SERVNO = :SERVNO " , 
	  ",  SPECDEB = :SPECDEB " , 
	  ",  PROFESSION = :PROFESSION " , 
	  ",  DIRRDY = :DIRRDY " , 
	  ",  DEPOSIT = :DEPOSIT " , 
	  ",  CURR_VOL_INT = :CURR_VOL_INT " , 
	  ",  CURR_VOL_LOC = :CURR_VOL_LOC " , 
	  ",  PREV_VOL_INT = :PREV_VOL_INT " , 
	  ",  PREV_VOL_LOC = :PREV_VOL_LOC " , 
	  ",  PROFILE = :PROFILE " , 
	  ",  NEXT_VOL_LOC = :NEXT_VOL_LOC " , 
	  ",  NEXT_VOL_INT = :NEXT_VOL_INT " , 
	  ",  LAST_CALL_DATE = :LAST_CALL_DATE " , 
	  ",  LAST_CALL_TIME = :LAST_CALL_TIME " , 
	  ",  OLD_CONTRNO = :OLD_CONTRNO " , 
	  ",  TRSF_DATE = :TRSF_DATE " , 
	  ",  SUB_LIMIT = :SUB_LIMIT " , 
	  ",  NUM_TYPE = :NUM_TYPE " , 
	  ",  BS_TYPE = :BS_TYPE " , 
	  ",  LASTNAME = :LASTNAME " , 
	  ",  POSTAL_CODE = :POSTAL_CODE " , 
	  ",  POSTAL_ADR = :POSTAL_ADR " , 
	  ",  ZIP_CODE = :ZIP_CODE " , 
	  ",  TITLE = :TITLE " , 
	  ",  NAME = :NAME " , 
	  ",  FIRST_NAME = :FIRST_NAME " , 
	  ",  BIN_BINT = :BIN_BINT " , 
	  ",  SECOND_NAME = :SECOND_NAME " , 
	  ",  BIN = :BIN " , 
	  ",  THIRD_NAME = :THIRD_NAME " , 
	  ",  LAST_NAME = :LAST_NAME " , 
	  ",  AR_TITLE = :AR_TITLE " , 
	  ",  AR_NAME = :AR_NAME " , 
	  ",  AR_FIRST_NAME = :AR_FIRST_NAME " , 
	  ",  AR_BIN_BINT = :AR_BIN_BINT " , 
	  ",  AR_SECOND_NAME = :AR_SECOND_NAME " , 
	  ",  AR_BIN = :AR_BIN " , 
	  ",  AR_THIRD_NAME = :AR_THIRD_NAME " , 
	  ",  AR_LAST_NAME = :AR_LAST_NAME " , 
	  ",  CO = :CO " , 
	  ",  POST_AREA = :POST_AREA " , 
	  ",  STREET_NO = :STREET_NO " , 
	  ",  STREET = :STREET " , 
	  ",  BUILD_NO = :BUILD_NO " , 
	  ",  BUILDING = :BUILDING " , 
	  ",  ADDRS_AREA = :ADDRS_AREA " , 
	  ",  ADDRS_BLOCK = :ADDRS_BLOCK " , 
	  ",  ADDRESS = :ADDRESS " , 
	  ",  IVR_LANG = :IVR_LANG " , 
	  ",  PERSONAL_ID = :PERSONAL_ID " , 
	  ",  EXC = :EXC " , 
	  ",  CARDNO = :CARDNO " , 
	  ",  CARD_TYPE = :CARD_TYPE " , 
	  ",  INT_RETAILER = :INT_RETAILER " , 
	  ",  PREPOST_PAID = :PREPOST_PAID " , 
	  ",  TARIFF_PROFILE = :TARIFF_PROFILE " , 
	  ",  PP_FROM_DATE = :PP_FROM_DATE " , 
	  ",  SP_NO = :SP_NO " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  CALLER_SUBSCR_TYPE = :CALLER_SUBSCR_TYPE " , 
	  ",  CALLER_AREA = :CALLER_AREA " , 
	  ",  CONT_SUB = :CONT_SUB " , 
	  ",  ID_TYPE = :ID_TYPE " , 
	  ",  ID_NO = :ID_NO " , 
	  ",  NUM_CHARGED = :NUM_CHARGED " , 
	  ",  RESERVATION_CODE = :RESERVATION_CODE " , 
	  ",  EXT_RETAILER = :EXT_RETAILER " , 
	  ",  PROMOTION = :PROMOTION " , 
	  ",  NAT_CODE = :NAT_CODE " , 
	  ",  GENDER = :GENDER " , 
	  ",  DATE_OF_BIRTH = :DATE_OF_BIRTH " , 
	  ",  REASON_CODE = :REASON_CODE " , 
	  ",  SEND_BILL_SMS = :SEND_BILL_SMS " , 
	  ",  SEND_SMS_OPENBAL = :SEND_SMS_OPENBAL " , 
	  ",  MAIN_GSM = :MAIN_GSM " , 
	  ",  DISTRICT_NUMBER = :DISTRICT_NUMBER " , 
	  ",  FLOOR = :FLOOR " , 
	  ",  INVOICE_ADDRESS = :INVOICE_ADDRESS " , 
	  ",  POSTAL_ZONE = :POSTAL_ZONE " , 
	  ",  POSTAL_ZONE_EXT = :POSTAL_ZONE_EXT " , 
	  ",  PO_NAME = :PO_NAME " , 
	  ",  CAZA = :CAZA " , 
	  ",  STAFF_NO = :STAFF_NO " , 
	  ",  LANGUAGE = :LANGUAGE " , 
	  ",  REGION = :REGION ",
		" WHERE  SUBNO = :SUBNO "

	]

	,
	"DELETE_CRM_USER_INFO":[
		" DELETE FROM CRM_USER_INFO ",
		" WHERE  SUBNO = :SUBNO "

	]
	,
	"GET_DSP_FORM_DEF":[
		" SELECT FORM_NAME ,  FORM_DESC ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_DEF ",
		" WHERE FORM_NAME = :FORM_NAME"

	]

	,
	"GET_DSP_FORM_DEF_QUERY":[
		" SELECT FORM_NAME ,  FORM_DESC ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_DEF ",
		" :_WHERE "
	]

	,
	"INSERT_DSP_FORM_DEF":[
		" INSERT INTO DSP_FORM_DEF ",
		" ( FORM_NAME  ,  FORM_DESC  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :FORM_DESC  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_DEF":[
		" UPDATE  DSP_FORM_DEF ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  FORM_DESC = :FORM_DESC " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME "

	]

	,
	"DELETE_DSP_FORM_DEF":[
		" DELETE FROM DSP_FORM_DEF ",
		" WHERE  FORM_NAME = :FORM_NAME "

	]







}

